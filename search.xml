<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客搭建</title>
      <link href="/article/f3fb008f.html"/>
      <url>/article/f3fb008f.html</url>
      
        <content type="html"><![CDATA[<p>发博客，总会因为各种原因不过审，那就自己申请域名搭博客，这样既可以记录技术，又可以写自己的感悟。</p><span id="more"></span><p>搭建博客需要的前提条件：</p><ul><li>GitHub&#x2F;Gitee 账户</li><li>安装 Git</li></ul><h2 id="1-购买域名"><a href="#1-购买域名" class="headerlink" title="1 购买域名"></a>1 购买域名</h2><p>购买域名有几个网站，可以在<a href="https://www.godaddy.com/zh-sg/offers/domains/godaddycom?isc=gennbacn07&countryview=1&currencyType=CNY&utm_source=baidu&utm_medium=cpc&utm_term=Title&utm_campaign=zh-cn_corp_sem_x_b_x_bz_001&utm_content=Brandzone%20PC&gclid=CIXh9LjPmecCFdOavAoddDkHcw&gclsrc=ds">Godaddy</a>上，也可以在<a href="https://wanwang.aliyun.com/">万网</a>，<a href="https://cloud.tencent.com/?fromSource=gwzcw.2212127.2212127.2212127&utm_medium=cpd&utm_id=gwzcw.2212127.2212127.2212127">腾讯云</a>等网站购买，我是在万网上购买的，一个.com的域名第一年就69元。</p><p>首先用支付宝登录万网，点击查询自己想要注册的域名是否已经被注册</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/112.1ehd79l0zgf4.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/112.1ehd79l0zgf4.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="112" /><p>如果你需要的域名没有被注册，点击加入清单，再点击立即结算</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/113.3hm2ohhzcvk0.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/113.3hm2ohhzcvk0.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="113" />先选择你要的年限，再点击个人，接着点击创建新的信息模板：<img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/114.6vy5ufotxb0.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/114.6vy5ufotxb0.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="114" /><p>填完下图信息，点击 保存 即可：</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/115.4z85yyc8xrk0.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/115.4z85yyc8xrk0.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="115" /><p>接下来，先验证邮箱，再实名认证，然后打开万网给你发的邮件验证，实名认证需要上传身份证，此时模板还是未认证状态，等认证通过，勾选模板，再勾选我已阅读，点击立即购买即可完成。</p><h2 id="2-安装-node-js-和-Hexo"><a href="#2-安装-node-js-和-Hexo" class="headerlink" title="2 安装 node.js 和 Hexo"></a>2 安装 node.js 和 Hexo</h2><h2 id="2-1-安装-node-js"><a href="#2-1-安装-node-js" class="headerlink" title="2.1 安装 node.js"></a>2.1 安装 node.js</h2><p>下载地址：<a href="https://nodejs.org/en">https://nodejs.org/en</a></p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/116.2m2s8oqd4zi0.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/116.2m2s8oqd4zi0.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="116" /><p>如上图，直接点击下载，完成后双击安装，安装直接默认 next 就好，很简单，需要改的也就是安装位置改一下，我是在D盘新建了一个文件夹 nodejs，安装在这个文件夹里。如果要看详细到每一步的话，可以看一下这个文章：<a href="https://blog.csdn.net/antma/article/details/86104068">node.js 安装详细步骤教程</a>。</p><p>安装成功，文件夹结构如下，并在上面安装过程中已自动配置了环境变量和安装好了 npm 包（也可以手动配置），此时可以执行 <code>node -v</code> 和 <code>npm -v</code> 分别查看 node 和 npm 的版本号：</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/134.5u91jsytfjk0.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/134.5u91jsytfjk0.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="134" /><p>因为在执行例如 <code>npm install webpack -g</code> 等命令全局安装的时候，默认会将模块安装在 <code>C:\Users\用户名\AppData\Roaming</code> 路径下的npm和npm_cache中，不方便管理且占用C盘空间，如下图所示：</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/135.1pcyhnd2eeo0.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/135.1pcyhnd2eeo0.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="135" /><p>所以这里配置自定义的全局模块安装目录，在 node.js 安装目录下新建两个文件夹 node_global 和 node_cache，然后在cmd命令下执行如下两个命令：</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/136.222iqanek05c.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/136.222iqanek05c.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="136" /><p>执行成功。然后在环境变量 -&gt; 系统变量中新建一个变量名为 “NODE_PATH”， 值为 <code>“D:\Program Files\nodejs\node_global\node_modules”</code>，如下图：</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/142.3a74zjfl9w80.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/142.3a74zjfl9w80.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="142" /><p>最后编辑用户变量里的Path，将相应npm的路径改为：<code>D:\Program Files\nodejs\node_global</code>，如下：</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/138.pzitxkoa17k.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/138.pzitxkoa17k.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="138" /><p>在 cmd 命令下执行 <code>npm install webpack -g</code>：</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/139.5wybpub3wc00.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/139.5wybpub3wc00.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="139" /><p>温馨提示：注意在建立两个文件夹 node_global 与 node_cache 时，需要右键设置“属性”，将用户具有完全属性的权限，否则在 <code>npm install webpack</code> 时会报错。</p><p>然后 webpack 这个模块已经在我们设置默认的文件夹中了：</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/140.3oapxqi22ig0.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/140.3oapxqi22ig0.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="140" /><h3 id="2-2-安装-Hexo"><a href="#2-2-安装-Hexo" class="headerlink" title="2.2 安装 Hexo"></a>2.2 安装 Hexo</h3><p>Hexo就是我们的个人博客网站的框架，在安装之前，我们要先在GitHub上创立一个仓库，如下图：</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/141.15czm339hzi8.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/141.15czm339hzi8.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="141" /><p><strong>1. 下载 Hexo</strong></p><p>接下来就是安装Hexo，首先在D盘建立一个文件夹 Blog，点开 Blog 文件夹，y以管理员运行 CMD 终端（也可以鼠标右键打开 <code>Git Bash Here</code>），输入 npm 命令安装 Hexo，安装完成后，输入 <code>hexo init</code> 命令初始化博客，然后输入 <code>hexo g</code> 静态部署，这时网页已经部署完成，输入 <code>hexo s</code> 命令可以查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/004.4pekxs40zji0.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/004.4pekxs40zji0.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="004" /><p>浏览器输入 <a href="http://localhost:4000/">http://localhost:4000</a> 就可以打开新部署的网页：</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/003.vo16jvph5z4.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/003.vo16jvph5z4.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="003" /><p><strong>2. 将 Hexo 部署到 GitHub</strong></p><p>现在回到我们的 Blog 文件夹，用笔记本打开 <code>_config.yml</code> 文件，如下图：</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/006.1dz8z5aa290g.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/006.1dz8z5aa290g.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="006" /><p>下滑到文件底部，填上如下内容：</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/005.3k0fdvwucpw0.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/005.3k0fdvwucpw0.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="005" /><p>你的仓库地址就是下图这个：</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/007.45l40fnl3u20.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/007.45l40fnl3u20.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="007" /><p>继续安装Git部署插件，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/008.12k2ai4luxw0.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/008.12k2ai4luxw0.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="008" /><p>然后分别输入以下三条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   <span class="comment"># 清除缓存文件 db.json 和已生成的静态文件 public</span></span><br><span class="line">hexo g       <span class="comment"># 生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span></span><br><span class="line">hexo d       <span class="comment"># 自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span></span><br></pre></td></tr></table></figure><p><center class = "half"><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/009.4824fabnrsi0.webp#pic_left" width = "48%"><img src = "https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/010.12r1yrmi7aq8.webp#pic_left"  width = "48%"></center></p><p>完成以后，打开浏览器，输入 <a href="https://xxx.github.io/">https://xxx.github.io</a> 就可以打开你的网页了。</p><h3 id="2-3-解析域名"><a href="#2-3-解析域名" class="headerlink" title="2.3 解析域名"></a>2.3 解析域名</h3><p>第一步：登录万网，点击控制台，在你已购买的域名后点击解析添加一条解析记录：</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/011.3ekdvo6ka6w0.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/011.3ekdvo6ka6w0.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="011" /><p>那个IPV4地址可以通过ping得到，具体方法是：打开cmd输入下面命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping molimi.github. -<span class="number">4</span>       <span class="comment"># ping + 你的GitHub的网址 </span></span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/012.6fttpyogc3o0.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/012.6fttpyogc3o0.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="012" /><p>第二步：打开 Blog 文件夹里的 source 文件夹，添加 CNAME 文件，可以先创建一个 CNAME.txt 文件，打开后写上你的域名，不要加 www 否则每次访问都必须加 www，但如果不带有 www，以后访问的时候带不带 www 都可以访问，保存后记得要重命名，将 .txt 删除，如下图：</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/013.3jkkos4ga9a0.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/013.3jkkos4ga9a0.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="013" /><p>第三步回到 Blog 文件夹，右键打开 Git Bash，依次输入下面三条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>打开 GitHub，看看CNAME文件是否已经在你的项目中：</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/014.5ui049889rw0.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客搭建/014.5ui049889rw0.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="014" /><p>这样就完成啦！这时候你就可以浏览器直接输入你的域名就会进入你搭建的网页啦！</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>从零开始搭建个人博客：<a href="https://zhuanlan.zhihu.com/p/102592286">https://zhuanlan.zhihu.com/p/102592286</a></li><li>node.js 安装详细步骤教程：<a href="https://blog.csdn.net/antma/article/details/86104068">https://blog.csdn.net/antma/article/details/86104068</a></li><li>hexo+github搭建个人博客(超详细教程)：<a href="https://blog.csdn.net/AinUser/article/details/77609180">https://blog.csdn.net/AinUser/article/details/77609180</a></li><li>Hexo官方文档：<a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo">https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名购买 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础篇（二）-- 数据类型和运算符</title>
      <link href="/article/8a42c3c2.html"/>
      <url>/article/8a42c3c2.html</url>
      
        <content type="html"><![CDATA[<p>这一部分主要对Python的数据类型包括：数字、字符串、列表、元组、集合、字典进行介绍，然后介绍运算符，转义字符、数据类型转换、算术运算符、赋值运算符、位运算、比较运算符、逻辑运算符等。</p><span id="more"></span><h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1 数据类型"></a>1 数据类型</h2><p>所有的编程语言都支持变量，变量是编程的起点，程序需要将数据存储到变量中。在编程语言中，变量是数据的载体，简单的说就是一块用来保存数据的内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。从底层看，程序中的数据最终都要放到内存（内存条）中，变量其实就是这块内存的名字。计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：</p><ul><li>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；</li><li>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）</li></ul><p>变量在<code>Python</code>内部是有类型的，比如<code>int</code>、<code>float</code> 等，但是我们在编程时无需关注变量类型，所有的变量都无需提前声明，赋值后就能使用。另外，<code>Python</code>是动态类型语言，可以将不同类型的数据赋值给同一个变量，所以变量的类型是随时可以改变的。</p><p>任何编程语言都需要处理数据，比如数字、字符串、字符等，我们可以直接使用数据，也可以将数据保存到变量中，方便以后使用。</p><p><code>Python</code>中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p>在<code>Python</code>中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。等号（&#x3D;）用来给变量赋值。</p><p><strong>变量与常量</strong></p><p>常量是在程序运行过程中，值不能改变的量。<code>Python</code>中并未提供定义常量的保留字，在<code>PEP8</code>规定常量有大写字母和下划线组成。</p><p><code>Python</code>中，使用内置函数<code>type()</code>返回变量类型，使用<code>id()</code>返回变量所指内存区域。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>AGE_OF_NICK = <span class="number">19</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(AGE_OF_NICK)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(AGE_OF_NICK)</span><br></pre></td></tr></table></figure><p>在内存中存储的数据可以有多种类型。字符型、数值型、布尔型都是<code>Python</code>语言中提供的基本数据类型。</p><h3 id="1-1-数字"><a href="#1-1-数字" class="headerlink" title="1.1 数字"></a>1.1 数字</h3><p><code>Python</code>中提供了数字类型保存数值，数字类型包括整数、浮点数和复数。他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。当你指定一个值时，Number 对象就会被创建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>number = <span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>1、整数</strong></p><p>整数包括正整数、负整数和零。在<code>Python3</code>中，不管对于多大或者多小的整数，只用一种类型存储，就是<code>int</code>。<code>Python</code>整数的取值范围是无限的，不管多大或者多小的数字，<code>Python</code>都能轻松处理。当所用数值超过计算机自身的计算能力时，<code>Python</code>会自动转用高精度计算（大数计算）。</p><p>整数类型包括十进制整数、八进制整数、十六进制整数和二进制整数。<br>1）十进制形式</p><p>我们平时常见的整数就是十进制形式，它由 0~9 共十个数字排列组合而成。注意，使用十进制形式的整数不能以 0 作为开头，除非这个数值本身就是 0。</p><p>2）二进制形式</p><p>由 0 和 1 两个数字组成，书写时以<code>0b</code>或<code>0B</code>开头。例如，101 对应十进制数是 5。</p><p>3）八进制形式</p><p>八进制整数由 0~7 共八个数字组成，以<code>0o</code>或<code>0O</code>开头。注意，第一个符号是数字 0，第二个符号是大写或小写的字母 O。</p><p>4）十六进制形式</p><p>由 <code>0~9</code> 十个数字以及 <code>A~F</code>（或 a~f）六个字母组成，书写时以<code>0x</code>或<code>0X</code>开头</p><p><strong>数字分隔符：</strong> 对于很大的数，例如10000000000，很难数清楚0的个数。为了提高数字的的可读性，<code>Python 3.x</code>允许使用下划线_作为数字（包括整数和小数）的分隔符。通常每隔三个数字添加一个下划线，类似于英文数字中的逗号。下划线不会影响数字本身的值。</p><p><strong>2、小数&#x2F;浮点数</strong></p><p>浮点数由整数部分和小数部分组成，主要用于处理包括小数的数。有两种书写形式：</p><ol><li><p>十进制形式<br>这种就是我们平时看到的小数形式，例如 34.6、346.0、0.346。</p></li><li><p>指数形式<br>Python 小数的指数形式的写法为：</p></li></ol><blockquote><p>aEn 或 aen<br>a 为尾数部分，是一个十进制数；n 为指数部分，是一个十进制整数；E或e是固定的字符，用于分割尾数部分和指数部分。整个表达式等价于 $a\times 10^n$。</p></blockquote><p><strong>温馨提示：</strong> 注意，只要写成指数形式就是小数，即使它的最终值看起来像一个整数。例如 14E3 等价于 14000，但 14E3 是一个小数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="number">12e4</span>)</span><br><span class="line"><span class="number">120000.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="number">12.3</span>*<span class="number">0.1</span>)</span><br><span class="line"><span class="number">1.2300000000000002</span></span><br></pre></td></tr></table></figure><p><strong>温馨提示：</strong> <code>12.3*0.1</code>的计算结果很明显是 1.23，但是<code>print</code>的输出却不精确。这是因为小数在内存中是以二进制形式存储的，小数点后面的部分在转换成二进制时很有可能是一串无限循环的数字，无论如何都不能精确表示，所以小数的计算结果一般都是不精确的。对于浮点数，不能直接使用比较判断是否相等。</p><p><strong>3、复数类型</strong></p><p>复数由实部（real）和虚部（imag）组成，并且使用<code>j</code>或者<code>J</code>表示虚部。可以用<code>a + bj</code>，或者·complex(a,b)·表示， 复数的实部和虚部都是浮点型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">complex</span>(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a.real)</span><br><span class="line"><span class="number">3.0</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(a.imag)</span><br><span class="line"><span class="number">4.0</span></span><br></pre></td></tr></table></figure><p><strong>4、布尔类型</strong></p><p>布尔类型主要用来表示真值或假值。在<code>Python</code>中，标识符<code>True</code>和<code>False</code>被解释为布尔值。另外，<code>Python</code>中的布尔值可以转化为数值，<code>True</code>表示1，<code>False</code>表示0。</p><p>在<code>Python</code>中，所有的对象都可以进行真值测试。其中，只有下面列出的几种情况得到的值为假，其他对象在<code>if</code>或者<code>while</code>语句中都表现为真。</p><ul><li>False 或 None。</li><li>数值中的零，包括0、0.0、虚数0。</li><li>回空序列，包括字符串、空元组、空列表、空字典。</li><li>自定义对象的实例，该对象的<code>_bool_</code>方法返回<code>False</code>或者<code>_len_</code>方法返回0。</li></ul><p><strong>温馨提示：</strong><code>Python</code>中的布尔类型的值可以进行数值运算，例如，<code>“False +1”</code>的结果为1。但是不建议对布尔类型的值进行数值运算。</p><h3 id="1-2-字符串"><a href="#1-2-字符串" class="headerlink" title="1.2 字符串"></a>1.2 字符串</h3><p>字符串就是连续的字符序列，可以是计算机所能表示的一切字符的集合。<font color=#9900CC><strong><code>Python</code>中字符串属于不可变序列，使用单引号<code>&#39;...&#39;</code>，双引号<code>&#39;&#39;...&#39;&#39;</code>，或<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>括起来。</font></strong><code>Python</code>中单引号和双引号使用完全相同，只能单行；使用三引号(‘’’或”””)可以指定一个多行字符串。详细用法如下：</p><ul><li>字符串可以用<code>+</code>运算符连接在一起，用<code>*</code>运算符重复。</li><li><code>Python</code>中的字符串有两种索引方式，从左往右以 0 开始，最大范围是字符串长度少1；从右往左以 -1 开始，最大范围是字符串开头。</li><li><code>Python</code>没有单独的字符类型，一个字符就是长度为 1 的字符串。</li><li>字符串的截取的语法格式如下：变量<code>[头下标:尾下标:步长]</code>，其中头下标是从 0 开始算起，可以是正数或负数；尾下标可以为空表示取到头或尾；步长表示间隔。获取的子字符串包含头下标的字符，但不包含尾下标的字符。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>；<span class="number">5</span>])</span><br><span class="line">llo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">str</span>*<span class="number">2</span>)</span><br><span class="line">Hello World!Hello World!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">str</span>+<span class="string">&quot;Test&quot;</span>)</span><br><span class="line">Hello World!Test</span><br></pre></td></tr></table></figure><h3 id="1-3-列表"><a href="#1-3-列表" class="headerlink" title="1.3 列表"></a>1.3 列表</h3><p>List（列表） 是 Python 中使用最频繁的数据类型。列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。列表用<code>[ ]</code>标识，是<code>python</code>最通用的复合数据类型。</p><p>列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客图库/001.3d88ipk687i0.webp#pic_center" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/博客图库/001.3d88ipk687i0.webp#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" width=50%><p>加号<code>+</code>是列表连接运算符，星号<code>*</code>是重复操作。如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [ <span class="string">&#x27;runoob&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;john&#x27;</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">&#x27;john&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>               <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>[<span class="number">0</span>]            <span class="comment"># 输出列表的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>]          <span class="comment"># 输出第二个至第三个元素 </span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>[<span class="number">2</span>:]           <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="built_in">print</span> tinylist * <span class="number">2</span>       <span class="comment"># 输出列表两次</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span> + tinylist    <span class="comment"># 打印组合的列表</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>[‘runoob’, 786, 2.23, ‘john’, 70.2]<br>runoob<br>[786, 2.23]<br>[2.23, ‘john’, 70.2]<br>[123, ‘john’, 123, ‘john’]<br>[‘runoob’, 786, 2.23, ‘john’, 70.2, 123, ‘john’]</p></blockquote><h3 id="1-4-元组"><a href="#1-4-元组" class="headerlink" title="1.4 元组"></a>1.4 元组</h3><p>元组是另一个数据类型，类似于 List（列表）。元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = ( <span class="string">&#x27;runoob&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;john&#x27;</span>, <span class="number">70.2</span> )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">&#x27;john&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="built_in">tuple</span>               <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">tuple</span>[<span class="number">0</span>]            <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">tuple</span>[<span class="number">1</span>:<span class="number">3</span>]          <span class="comment"># 输出第二个至第四个（不包含）的元素 </span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">tuple</span>[<span class="number">2</span>:]           <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="built_in">print</span> tinytuple * <span class="number">2</span>       <span class="comment"># 输出元组两次</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">tuple</span> + tinytuple   <span class="comment"># 打印组合的元组</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>(‘runoob’, 786, 2.23, ‘john’, 70.2)<br> runoob<br> (786, 2.23)<br>  (2.23, ‘john’, 70.2)<br>  (123, ‘john’, 123, ‘john’)<br>  (‘runoob’, 786, 2.23, ‘john’, 70.2, 123, ‘john’)</p></blockquote><p><strong>温馨提示：</strong> 元组是不允许更新的，而列表是允许更新的。</p><h3 id="1-5-集合"><a href="#1-5-集合" class="headerlink" title="1.5 集合"></a>1.5 集合</h3><p><code>Python</code>中的集合，和数学中的集合概念一样，用来保存不重复的元素，即集合中的元素都是唯一的，互不相同。从形式上看，和字典类似，<code>Python</code>集合会将所有元素放在一对大括号 {} 中，相邻元素之间用“,”分隔，如下所示：</p><blockquote><p>{element1, element2, …, elementn}</p></blockquote><p>从内容上看，同一集合中，只能存储不可变的数据类型，包括整形、浮点型、字符串、元组，无法存储列表、字典、集合这些可变的数据类型，否则 Python 解释器会抛出 TypeError 错误。</p><h3 id="1-6-字典"><a href="#1-6-字典" class="headerlink" title="1.6 字典"></a>1.6 字典</h3><p>字典(dictionary)是除列表以外<code>Python</code>之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。字典用”{ }”标识。字典由索引(key)和它对应的值<code>value</code>组成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;This is one&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>] = <span class="string">&quot;This is two&quot;</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">6734</span>, <span class="string">&#x27;dept&#x27;</span>: <span class="string">&#x27;sales&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>]          <span class="comment"># 输出键为&#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">dict</span>[<span class="number">2</span>]              <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> tinydict             <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> tinydict.keys()      <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> tinydict.values()    <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>This is one<br>This is two<br>{‘dept’: ‘sales’, ‘code’: 6734, ‘name’: ‘runoob’}<br>[‘dept’, ‘code’, ‘name’]<br>[‘sales’, 6734, ‘runoob’]</p></blockquote><p><strong>小结</strong></p><ul><li>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；</li><li>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</li></ul><hr><h2 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2 运算符"></a>2 运算符</h2><p>运算符将各种类型的数据连接在一起形成表达式。Python 的运算符丰富但不混乱，比如 Python 支持自增和自减运算符，但是它只支持一种形式，就是前自增和前自减，而取消了后自增和后自减，避免了给程序员造成混乱。</p><p><code>Python</code>的运算符包括算术运算符、赋值运算符、比较运算符、逻辑运算符和位运算符。使用运算符将不同类型数据按照一定规则连接在一起的式子称为表达式。</p><h3 id="2-1-转义字符"><a href="#2-1-转义字符" class="headerlink" title="2.1 转义字符"></a>2.1 转义字符</h3><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>\n</td><td>换行符，将光标位置移到下一行开头</td></tr><tr><td>\r</td><td>回车符，将光标位置移到本行开头</td></tr><tr><td>\t</td><td>水平制表符，也即 Tab 键，一般相当于四个空格</td></tr><tr><td>\a</td><td>蜂鸣器响铃</td></tr><tr><td>\b</td><td>退格（Backspace），将光标位置移到前一列</td></tr><tr><td>\0</td><td>空</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\</td><td>反斜线</td></tr><tr><td>\’</td><td>单引号</td></tr><tr><td>\”</td><td>双引号</td></tr><tr><td>\</td><td>在字符串行尾的续行符，即一行未完，转到下一行继续写</td></tr></tbody></table><p><strong>温馨提示：</strong> 反斜杠可以用来转义，使用<code>r</code>可以让反斜杠不发生转义。 如<code>r&quot;this is a line with \n&quot;</code>则<code>\n</code>会显示，并不是换行。</p><h3 id="2-2-数据类型转换"><a href="#2-2-数据类型转换" class="headerlink" title="2.2 数据类型转换"></a>2.2 数据类型转换</h3><table class="reference"><tbody><tr><th>函数</th><th>描述</th></tr><tr valign="top"><td><p><a href="https://www.runoob.com/python/python-func-int.html" target="_blank" rel="noopener noreferrer">int(x [,base])</a></p></td><td><p>将x转换为一个整数</p></td></tr><tr valign="top"><td><p><a href="https://www.runoob.com/python/python-func-float.html" target="_blank" rel="noopener noreferrer">float(x)</a></p></td><td><p>将x转换到一个浮点数</p></td></tr><tr valign="top"><td><p><a href="https://www.runoob.com/python/python-func-complex.html" target="_blank" rel="noopener noreferrer">complex(real [,imag])</a></p></td><td><p>创建一个复数</p></td></tr><tr valign="top"><td><p><a href="https://www.runoob.com/python/python-func-str.html" target="_blank" rel="noopener noreferrer">str(x)</a></p></td><td><p>将对象 x 转换为字符串</p></td></tr><tr valign="top"><td><p><a href="https://www.runoob.com/python/python-func-repr.html" target="_blank" rel="noopener noreferrer">repr(x)</a></p></td><td><p>将对象 x 转换为表达式字符串</p></td></tr><tr valign="top"><td><p><a href="https://www.runoob.com/python/python-func-eval.html" target="_blank" rel="noopener noreferrer">eval(str)</a></p></td><td><p>用来计算在字符串中的有效Python表达式,并返回一个对象</p></td></tr><tr valign="top"><td><p><a href="att-tuple-tuple.html" target="_blank" rel="noopener noreferrer">tuple(s)</a></p></td><td><p>将序列 s 转换为一个元组</p></td></tr><tr valign="top"><td><p><a href="att-list-list.html" target="_blank" rel="noopener noreferrer">list(s)</a></p></td><td><p>将序列 s 转换为一个列表</p></td></tr><tr valign="top"><td><p><a href="https://www.runoob.com/python/python-func-set.html" target="_blank" rel="noopener noreferrer">set(s)</a></p></td><td><p>转换为可变集合</p></td></tr><tr valign="top"><td><p><a href="https://www.runoob.com/python/python-func-dict.html" target="_blank" rel="noopener noreferrer">dict(d)</a></p></td><td><p>创建一个字典。d 必须是一个序列 (key,value)元组。</p></td></tr><tr valign="top"><td><p><a href="https://www.runoob.com/python/python-func-frozenset.html" target="_blank" rel="noopener noreferrer">frozenset(s)</a></p></td><td><p>转换为不可变集合</p></td></tr><tr valign="top"><td><p><a href="https://www.runoob.com/python/python-func-chr.html" target="_blank" rel="noopener noreferrer">chr(x)</a></p></td><td><p>  将一个整数转换为一个字符</p></td></tr><tr valign="top"><td><p><a href="https://www.runoob.com/python/python-func-unichr.html" target="_blank" rel="noopener noreferrer">unichr(x)</a></p></td><td><p>将一个整数转换为Unicode字符</p></td></tr><tr valign="top"><td><p><a href="https://www.runoob.com/python/python-func-ord.html" target="_blank" rel="noopener noreferrer">ord(x)</a></p></td><td><p> 将一个字符转换为它的整数值</p></td></tr><tr valign="top"><td><p><a href="https://www.runoob.com/python/python-func-hex.html" target="_blank" rel="noopener noreferrer">hex(x)</a></p></td><td><p>  将一个整数转换为一个十六进制字符串</p></td></tr><tr valign="top"><td><p><a href="https://www.runoob.com/python/python-func-oct.html" target="_blank" rel="noopener noreferrer">oct(x)</a></p></td><td><p> 将一个整数转换为一个八进制字符串</p></td></tr></tbody></table><h3 id="2-3-算术运算符"><a href="#2-3-算术运算符" class="headerlink" title="2.3 算术运算符"></a>2.3 算术运算符</h3><p>这里以 $a&#x3D;10, b&#x3D;20$ 为例</p><table class="reference"><tbody><tr><th>运算符</th><th>描述</th><th>实例</th></tr><tr><td>+</td><td>加 - 两个对象相加</td><td> a + b 输出结果 30</td></tr><tr><td>-</td><td>减 - 得到负数或是一个数减去另一个数</td><td> a - b 输出结果 -10</td></tr><tr><td>*</td><td>乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td> a * b 输出结果 200</td></tr><tr><td>/</td><td>除 - x除以y</td><td> b / a 输出结果 2</td></tr><tr><td>%</td><td>取模 - 返回除法的余数</td><td> b % a 输出结果 0</td></tr><tr><td>**</td><td>幂 - 返回x的y次幂</td><td> a**b 为10的20次方， 输出结果 100000000000000000000</td></tr><tr><td>//</td><td>取整除 - 返回商的整数部分（<strong>向下取整</strong>）</td><td> <pre class="prettyprint prettyprinted" style=""><span class="pun">&gt;&gt;&gt;</span><span class="pln"> </span><span class="lit">9</span><span class="com">//2</span><span class="pln"></span><span class="lit">4</span><span class="pln"></span><span class="pun">&gt;&gt;&gt;</span><span class="pln"> </span><span class="pun">-</span><span class="lit">9</span><span class="com">//2</span><span class="pln"></span><span class="pun">-</span><span class="lit">5</span></pre></td></tr></tbody></table><p>1、&#x2F; 和 &#x2F;&#x2F; 除法运算符</p><p><code>Python</code>支持<code>/</code>和<code>//</code>两个除法运算符，但它们之间是有区别的：</p><ul><li><code>/</code>表示普通除法，使用它计算出来的结果和数学中的计算结果相同。</li><li><code>//</code>表示整除，只保留结果的整数部分，舍弃小数部分；注意是直接丢掉小数部分，而不是四舍五入。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="number">20</span>/<span class="number">4</span>)</span><br><span class="line"><span class="number">5.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="number">20</span>//<span class="number">4</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="number">20.4</span>/<span class="number">4</span>)</span><br><span class="line"><span class="number">5.0</span></span><br></pre></td></tr></table></figure><p><strong>温馨提示：</strong></p><ul><li><code>/</code>的计算结果总是小数，不管是否能除尽，也不管参与运算的是整数还是小数。当有小数参与运算时，<code>//</code>结果才是小数，否则就是整数。</li><li>需要注意的是，除数始终不能为 0，除以 0 是没有意义的，这将导致<code>ZeroDivisionError</code>错误。在某些编程语言中，除以 0 的结果是无穷大（包括正无穷大和负无穷大）。<br>2、% 求余运算符</li></ul><p><code>%</code>运算符用来求得两个数相除的余数，包括整数和小数。<code>Python</code>使用第一个数字除以第二个数字，得到一个整数的商，剩下的值就是余数。对于小数，求余的结果一般也是小数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;7.7%2.2 =&quot;</span>, <span class="number">7.7</span>%<span class="number">2.2</span>)</span><br><span class="line"><span class="number">7.7</span>%<span class="number">2.2</span> = <span class="number">1.0999999999999996</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;-7.7%2.2 =&quot;</span>, -<span class="number">7.7</span>%<span class="number">2.2</span>)</span><br><span class="line">-<span class="number">7.7</span>%<span class="number">2.2</span> = <span class="number">1.1000000000000005</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;7.7%-2.2 =&quot;</span>, <span class="number">7.7</span>%-<span class="number">2.2</span>)</span><br><span class="line"><span class="number">7.7</span>%-<span class="number">2.2</span> = -<span class="number">1.1000000000000005</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;-7.7%-2.2 =&quot;</span>, -<span class="number">7.7</span>%-<span class="number">2.2</span>)</span><br><span class="line">-<span class="number">7.7</span>%-<span class="number">2.2</span> = -<span class="number">1.0999999999999996</span></span><br></pre></td></tr></table></figure><p>从运行结果可以发现两点：</p><ul><li>只有当第二个数字是负数时，求余的结果才是负数。换句话说，求余结果的正负和第一个数字没有关系，只由第二个数字决定。</li><li><code>%</code>两边的数字都是整数时，求余的结果也是整数；但是只要有一个数字是小数，求余的结果就是小数。</li></ul><h3 id="2-4-赋值运算符"><a href="#2-4-赋值运算符" class="headerlink" title="2.4 赋值运算符"></a>2.4 赋值运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>简单的赋值运算符</td><td>c &#x3D; a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td>+&#x3D;</td><td>加法赋值运算符</td><td>c +&#x3D; a 等效于 c &#x3D; c + a</td></tr><tr><td>-&#x3D;</td><td>减法赋值运算符</td><td>c -&#x3D; a 等效于 c &#x3D; c - a</td></tr><tr><td>*&#x3D;</td><td>乘法赋值运算符</td><td>c *&#x3D; a 等效于 c &#x3D; c * a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值运算符</td><td>c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td></tr><tr><td>%&#x3D;</td><td>取模赋值运算符</td><td>c %&#x3D; a 等效于 c &#x3D; c % a</td></tr><tr><td>**&#x3D;</td><td>幂赋值运算符</td><td>c **&#x3D; a 等效于 c &#x3D; c ** a</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>取整除赋值运算符</td><td>c &#x2F;&#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F;&#x2F; a</td></tr><tr><td>:&#x3D;</td><td>海象运算符，可在表达式内部为变量赋值</td><td>b &#x3D; [(a:&#x3D;0)+1, a-1, a*1, a&#x2F;1]</td></tr></tbody></table><p><strong>温馨提示：</strong> 海象运算符是<code>Python3.8</code>版本新增运算符。</p><h3 id="2-5-比较运算符"><a href="#2-5-比较运算符" class="headerlink" title="2.5 比较运算符"></a>2.5 比较运算符</h3><p>比较运算符，也称关系运算符，用于对常量、变量或表达式的结果进行大小比较。如果这种比较是成立的，则返回 True（真），反之则返回 False（假）。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于——比较对象是否相等，返回True&#x2F;False</td></tr><tr><td>!&#x3D;</td><td>不等于——比较两个对象是否相等，返回True&#x2F;False</td></tr><tr><td>&gt;</td><td>大于——判断x是否大于y，返回True&#x2F;False</td></tr><tr><td>&lt;</td><td>小于——判断x是否小于y，返回True&#x2F;False</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于——判断x是否大于等于y，返回True&#x2F;False</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于——判断x是否小于等于y，返回True&#x2F;False</td></tr></tbody></table><p>补充：在<code>Python</code>中，当需要判断一个变量是否介于两个值之间时，可以采用“值1&lt;变量&lt;值2”的形式，例如“0&lt;a&lt;100”。</p><h3 id="2-6-逻辑运算符"><a href="#2-6-逻辑运算符" class="headerlink" title="2.6 逻辑运算符"></a>2.6 逻辑运算符</h3><table><thead><tr><th>逻辑运算符</th><th>描述</th></tr></thead><tbody><tr><td>and</td><td>逻辑与运算，a and b，如果a为False，返回a的计算值，否则返回b的计算值</td></tr><tr><td>or</td><td>逻辑或运算，a or b，如果a是True，则返回a的计算值，否则返回b的计算值</td></tr><tr><td>not</td><td>逻辑非运算，not a，如果a为 True，返回 False，反之，则返回True</td></tr></tbody></table><p>对于<code>and</code>运算符，两边的值都为真时最终结果才为真，但是只要其中有一个值为假，那么最终结果就是假，所以 <code>Python</code>按照下面的规则执行<code>and</code>运算：</p><ul><li>如果左边表达式的值为假，那么就不用计算右边表达式的值了，因为不管右边表达式的值是什么，都不会影响最终结果，最终结果都是假，此时<code>and</code>会把左边表达式的值作为最终结果。</li><li>如果左边表达式的值为真，那么最终值是不能确定的，<code>and</code>会继续计算右边表达式的值，并将右边表达式的值作为最终结果。</li></ul><p>对于<code>or</code>运算符，情况是类似的，两边的值都为假时最终结果才为假，只要其中有一个值为真，那么最终结果就是真，所以<code>Python</code>按照下面的规则执行<code>or</code>运算：</p><ul><li>如果左边表达式的值为真，那么就不用计算右边表达式的值了，因为不管右边表达式的值是什么，都不会影响最终结果，最终结果都是真，此时<code>or</code>会把左边表达式的值作为最终结果。</li><li>如果左边表达式的值为假，那么最终值是不能确定的，<code>or</code>会继续计算右边表达式的值，并将右边表达式的值作为最终结果。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">and</span> <span class="number">0</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;&quot;</span> <span class="keyword">or</span> <span class="string">&quot;Python&quot;</span>)</span><br><span class="line">Pyhton</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="number">18.5</span> <span class="keyword">or</span> <span class="string">&quot;Python&quot;</span>)</span><br><span class="line"><span class="number">18.5</span></span><br></pre></td></tr></table></figure><p><strong>温馨提示：</strong> 在<code>Python</code>中，<code>and</code>和<code>or</code>不一定会计算右边表达式的值，有时候只计算左边表达式的值就能得到最终结果。另外，<code>and</code>和<code>or</code>运算符会将其中一个表达式的值作为最终结果，而不是将<code>True</code>或者<code>False</code>作为最终结果。</p><h3 id="2-7-位运算符"><a href="#2-7-位运算符" class="headerlink" title="2.7 位运算符"></a>2.7 位运算符</h3><p>位运算符把数字看作二进制进行计算。Python中的按位运算法则如下：下表中变量 a 为 60，b 为 13，二进制格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = 0011 <span class="number">1100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">0000</span> <span class="number">1101</span></span><br></pre></td></tr></table></figure><table class="reference"><tbody><tr><th>运算符</th><th>描述</th><th>实例</th></tr><tr><td>&amp;</td><td>按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td> (a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td>|</td><td> 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td> (a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td>^</td><td>按位异或运算符：当两对应的二进位相异时，结果为1 </td><td> (a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td>~</td><td> 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。<span class="marked">~x</span> 类似于 <span class="marked">-x-1</span></td><td> (~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。</td></tr><tr><td>&lt;&lt;</td><td>左移动运算符：运算数的各二进位全部左移若干位，由 <span class="marked">&lt;&lt;</span> 右边的数字指定了移动的位数，高位丢弃，低位补0。</td><td> a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>右移动运算符：把"&gt;&gt;"左边的运算数的各二进位全部右移若干位，<span class="marked">&gt;&gt;</span> 右边的数字指定了移动的位数 </td><td> a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><p><strong>温馨提示：</strong> 由于移位运算的速度很快，在程序中遇到表达式乘以或除以2的n次幂的情况时，一般采用移位运算来代替。</p><h3 id="2-8-其他运算符"><a href="#2-8-其他运算符" class="headerlink" title="2.8 其他运算符"></a>2.8 其他运算符</h3><p><strong>1、成员运算符</strong></p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False</td></tr></tbody></table><p><strong>2、身份运算符</strong></p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>is</td><td>判断两个标识符是不是引用自一个对象，返回True&#x2F;False</td></tr><tr><td>is not</td><td>判断两个标识符是不是引用自不同对象，返回True&#x2F;False</td></tr></tbody></table><blockquote></blockquote><p><code>is</code>判断两个对象是否相同，就是判断两个对象的内存地址。如果内存地址相同，说明两个对象使用的是同一块内存，当然就是同一个对象了。 <code>==</code>用于判断引用变量的值是否相等。</p><h3 id="2-9-运算符优先级"><a href="#2-9-运算符优先级" class="headerlink" title="2.9 运算符优先级"></a>2.9 运算符优先级</h3><p>优先级高的优先计算，优先级一样的从左往右依次计算(此为3.8官方文档数据)</p><table><thead><tr><th>优先级</th><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>(experession,…)，[expression,…]，{key:datum,…}，{expression,…}</td><td>绑定或元组显示,列表显示,字典显示,设置显示</td></tr><tr><td>2</td><td>x[index]，x[index:index]，f(arguments…)，x.attribute</td><td>抽取（下标）切片（寻址段）调用（函数调用），属性引用</td></tr><tr><td>3</td><td>await x</td><td>await表达式</td></tr><tr><td>4</td><td>**</td><td>乘方</td></tr><tr><td>5</td><td>+x，-x，~x</td><td>正，负，按位非 NOT</td></tr><tr><td>6</td><td>*，/，%,//,@</td><td>乘法、除法、取余、整除、矩阵乘</td></tr><tr><td>7</td><td>+,-</td><td>加法与减法</td></tr><tr><td>8</td><td>&lt;&lt;,&gt;&gt;</td><td>移位</td></tr><tr><td>9</td><td>&amp;</td><td>按位与AND</td></tr><tr><td>10</td><td>^</td><td>按位异或XOR</td></tr><tr><td>11</td><td>|</td><td>按位或OR</td></tr><tr><td>12</td><td>&lt;，&lt;=，&gt;，&gt;=，!=，==，in，not in，is，is not</td><td>比较运算，包括成员检测和标识号检测</td></tr><tr><td>13</td><td>not x</td><td>布尔逻辑“非” NOT</td></tr><tr><td>14</td><td>and</td><td>布尔逻辑“与” AND</td></tr><tr><td>15</td><td>or</td><td>布尔逻辑“或” OR</td></tr><tr><td>16</td><td>if–else</td><td>条件表达式</td></tr><tr><td>17</td><td>lambda</td><td>Lambda表达式</td></tr><tr><td>18</td><td>:=</td><td>海象运算符</td></tr></tbody></table><p><strong>温馨提示：</strong> 虽然<code>Python</code>运算符存在优先级的关系，但不推荐过度依赖运算符的优先级，这会导致程序的可读性降低。因此，建议编程时：</p><ul><li>不要把一个表达式写得过于复杂，如果一个表达式过于复杂，可以尝试把它拆分来书写。</li><li>不要过多地依赖运算符的优先级来控制表达式的执行顺序，这样可读性太差，应尽量使用<code>( )</code>来控制表达式的执行顺序。</li></ul><blockquote><p>以上内容仅作为自己学习使用，主要整理自以下Python教程网站：</p><ul><li>C语言中文网Python教程：<a href="http://c.biancheng.net/python/variable/">http://c.biancheng.net/python/variable/</a></li><li>菜鸟教程：<a href="https://www.runoob.com/python/python-variable-types.html">https://www.runoob.com/python/python-variable-types.html</a></li><li>廖雪峰Python教程：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017063413904832">https://www.liaoxuefeng.com/wiki/1016959663602400/1017063413904832</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
            <tag> 运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>节气习俗</title>
      <link href="/article/b81b9daf.html"/>
      <url>/article/b81b9daf.html</url>
      
        <content type="html"><![CDATA[<p>本篇主要记录一些重要的节日和节气的注意事项，希望给大家带来好运！</p><span id="more"></span><p>春节，华人最重要的节日，如何过，各地早就约定俗成，无需赘述。简单补充一下，说说一些易行的居家开运小方法，大家可以尝试下图个吉利：</p><ol><li><p>除尘。想必大部分人春节前都会对家里进行清洁，打扫除尘，洗洗涮涮。有个地方千万别漏掉，就是自家的卫生间，要清洁干净。从民俗上说，国内一些地方有敬厕神的习俗，扶桑也有种招财的法术，核心方法是每天在特定时间清理自家厕所，恭敬厕神，则财源滚滚。一些国际金融家在考察创业投资对象，进行实地考察时，对于细节的考察，比较注重两个地方 ，一个是老板的办公室，另一个是公司供内员工使用的厕所的清洁程度。创业之初，老板的办公室小而整洁，可以多少反映出老板务实自信不务虚的价值观，厕所则反映出细微处管理命令的执行力度和老板对生活对员工的态度。把卫生间打扫干净，是很吉利的事情。洋快餐卫生间的清洁程度一直都很高，没少赚国人的钱吧，笑。公司是否有钱途看卫生间，别人家里是否有钱，也可以去他家卫生间瞧瞧，笑。</p></li><li><p>贴福字。大门和最外层窗户的福字是坚决不能倒着贴的，否则福到你家门外就撒泼打滚不进去了，笑。汉字有繁简之分，更有倒正之分，字是有能量的。大门上，窗户上的吉祥画，吉祥话，如福字，都要正着贴。如果想取巧转运，可以讨个吉利：在需要转运的人卧室门上，或者里屋的墙壁，或者床头，倒着贴福字，把福引到需要者身边。自己的办公室内，还有办公桌隔断上，都可以倒着贴福字。</p></li><li><p>春节，是一家人团圆充电的时候，特别是对于千里之外归乡的游子来说，同一个姓氏的族人聚集在一起，抛开烦心事，说一些吉利话，你能感受到温暖安心，在一年更替时，心神安定，对来年的事业健康运势都是一种正能量的补充。祖坟风水好尚能福泽子孙，何况长辈健在时的团圆呢。能使人心安，使人谦卑，多听听长辈的唠叨，去粗取精，对自己的人生也有指导作用。</p></li><li><p>鞭炮。小朋友要注意安全第一，燃放危险程度低的小烟花小鞭炮就好。成年人有条件的自己燃放鞭炮，没条件的可以适当观看别人燃放鞭炮，效果差不多。人在紧张时肾上腺素激增，男性在影院看大片，炮弹轰鸣刀刀见血觉得特过瘾，肾上腺素激增可以使人更积极，更富有朝气，百邪不侵。女孩因为禀赋原因，对动作大片等使人肾上腺激增的东西大都不敢兴趣，过年时可以出去看看放炮的人群，听听炮声。古人没大片看，没摇滚音乐听，但是中国人很聪明，用爆竹声来振发阳气，激荡心神，驱赶鬼神，过年时放炮振发阳气，然后吃饺子吃美食来补充能量，你看，古人多么智慧。如果今年过得郁闷不得志，运气不好，那就出去听听炮声，或者亲手放鞭炮。如果觉得炮声很烦，那就别强迫自己去放鞭炮，特别是岁数大的人，一切以舒适为度。</p></li></ol><p>大年初四治治赖债不还者，即如何讨债。在红纸上写下对方姓名、住址、金额（如有八字更好），再念三遍：遁甲太阴显用！某某人名！速速还我银两。然后烧掉，将灰烬倒在自己住家周边水沟、河流等，实在不行冲在下水道也可以。上述方法在年初四使用最佳，当然此后也可用，注意：可以在使用一次后的七七四九天后再次使用，赖债者不还都难啦。</p><p>太君曰：“四立:是立春、立夏、立秋、立冬，四绝:为春分、夏至、秋分、冬至。”碰到这种季节的前后几天，地球轨道上的磁场和电波都会自然震动，影响气流、云层和天气变化。气流快，在季节前变天，曰气盛。气流慢，季节后变天，谓气衰。天气会骤变。患台风、寒潮或高温、暴雨。这个时候人和动物都会随着季节换毛和更新血脉，因此人们在这种时间要顺天循道，不能酗酒乱性、舟车探险，要戒烦戒燥，虚心静气，可防治伤寒流感传染病及慢性病者的旧病复发。避免不必要的人身伤害！遵者平安长寿。</p><p>立春这天“阳和起蛰，品物皆春”，过了立春，万物复苏生机勃勃，一年四季从此开始。</p><p>躲春，中国命理学认为，立春这一天，黄赤夹角应该是315度，由于磁场和气场的缘故，通常会比较乱，无论是家中还是办公室，容易招惹口舌事非。因此要进行躲春，否则一年内可能都非常不顺利。躲春这一天不宜搬迁、看望病重患者及参加丧事等，以免招惹晦气，影响一整年的运气。不妄动、不争论，乐呵呵的度过这一天。</p><p>古代有一个传说：立春快到来的时候，县官会带着本地的知名人士去土地里挖一个坑，然后把羽毛、鸡毛等轻物质放在坑里，等到了某个时辰，坑里的羽毛和鸡毛会从坑里飘上来，这个时刻就是立春时辰，开始放鞭炮庆祝，预祝明年风调雨顺、五谷丰登。</p><p>立春日祈福：找出自己年柱上之在自己三合的生肖， 三合的时辰(申子辰、已酉丑、寅午戍、亥卯未)【如猴生肖者， 可在子时或辰， 在子或辰位】，三合的方位，用锤敲墙或地三下，待土地公公感灵遂通，为你开天门，接福增运！<br>三合方位：东【卯兔】；南【午马】；西【酉鸡】；北【子鼠】。 东北偏东【寅虎】；西南偏西【申猴】；东南偏南【巳蛇】。西北偏北【亥猪】。 东南偏东【辰龙】；西北偏西【戌狗】；东北偏北【丑牛】；西南偏南【未羊】。</p><p><strong>二月二龙抬头、剃龙头</strong></p><p>民间普遍认为在这一天剃头，会使人红运当头、福星高照，因此，民谚说“二月二剃龙头，一年都有精神头”。孩子要“剃喜头”，保佑健康成长，长大后出人头地；大人要“剃龙头”辞旧迎新，希望带来好运。要是准备理髮，得早点去排队！</p><ul><li>四离指春分、秋分、夏至、冬至的前一天，称为离日。</li><li>四绝指立春、立夏、立秋、立冬的前一天，叫做绝日。</li></ul><p>碰到这种季节的前后几天，地球轨道上的磁场和电波都会自然震动，影响气流、云层和天气变化。气流快，在季节前变天，曰气盛。气流慢，季节后变天，谓气衰。天气会骤变。患台风、寒潮或高温、暴雨。这个时候人和动物都会随着季节换毛和更新血脉，因此人们在这种时间要顺天循道，不能酗酒乱性、舟车探险，要戒烦戒燥，虚心静气，可防治伤寒流感传染病及慢性病者的旧病复发。</p><p><strong>春分，这几天不宜劳累、熬夜等</strong></p><ul><li>春分、秋分、夏至、冬至的前一天，在术数上叫做“离日”。 </li><li>立春、立夏、立秋、立冬的前一天，叫做“绝日”。</li><li>按玄学的说法，四离日和四绝日，为四季相交，节令转移阴阳杂乱之时。</li></ul><p><strong>立夏，节气前后不宜熬夜酗酒等</strong></p><p><strong>端午节和一些禁忌</strong></p><p>端午节左右不要让小孩随便下水或接近水源的地方。</p><p>五月将至，农历五月俗称毒月，其中九日为伤身损气耗精元之日，分别为五月初五、初六、初七、十五、十六、十七、二五、二六、二七，其中端午为九毒日之首，故这一天民间有喝雄黄酒、插艾草等避邪驱毒的仪式。中国的每一个传统节日，都寓含着古德先贤智慧经验的传承以及先人对后人的无尽慈爱！</p><p>农历五月 农历五月俗称毒月。其中，五月初五、初六、初七、十五、十六、十七以及二五、二六、二七，此九天为“天地交泰九毒日”；“十四”为天地交泰日，一共十天。这十天内，务必端容肃己，严禁杀生，行淫，否则严重伤身损气耗精元。五月俗称“恶月”。君子应节制嗜欲，食物清淡，减少酸味，增加苦味，益肝补肾。此时节应静养，与自然和谐平定心气。天地主气交合及造化万物之辰，最宜戒酒色禁忌。</p><p>端午节午时：农历五月初五（从中午十一点到中午的十三点，而正午则是十二点）从井里打的水</p><ul><li>无根午时水：端午午时下雨接的雨水。</li><li>解暑午时水：用黄瓜的芯加盐泡成解暑的午时水。</li></ul><p>午时水用三种功效，一是饮用，泡茶或者制成解暑的午时水，甚至是制成酒；二是洗澡；三是清扫；人们用汲来的午时水加入一些白酒和少许雄黄粉(中药)，用以喷洒房间庭院，或洗澡、洗脸、洗手脚。传说，喝过午时水的都能活过九十八岁；用午时水加雄黄洗澡，那一年入夏不会生痱子，外出不会被蛇咬</p><p><strong>夏至</strong></p><p>要了解自己的旺运方位</p><ul><li>属相为鼠、牛、鸡的朋友，夏季旺运方位在西方</li><li>属相为蛇、马、猪的朋友，夏季旺运方位在东方</li><li>属相为龙、羊、狗的朋友，夏季旺运方位在南方</li><li>属相为虎、兔、猴的朋友，夏季旺运方位在北方</li></ul><p>夏天已到，此时，是喝姜枣茶养身最好的时候！养身方法：每年从立夏那一天开始，每天早上喝生姜红枣茶，一直喝到入伏的头一天。</p><p>三伏晒：【三伏晒太阳祛病法】三伏当天的上午九点到下午三点(9点～11是巳时，中午11点～1点是午时、1点～3点是未时)，赤身在烈日中暴晒，有点像欧美流行的裸身日光浴，但是古人发现，三伏这一天做足日光浴，不但能祛男男女女的陈年痼疾，也可医新病，效果之好，甚至痊愈除根。</p><p>立秋：用红纸书写“今日立秋，百病皆休”字样贴于墙上（入户门一侧的墙上即可），以起到预防疾病之目的。<br>立秋当天最好要避免男女同房做爱，否则容易产生情绪波动、抑郁的情绪，因为立秋阳气渐衰、阴气渐长，会伤及阳气，最终导致运势受损。有些地方立秋当日要避免洗澡、以及在田间行走，否则不利。</p><p>鬼节，农历七月阎罗打开地狱放出鬼，八月初关闭。<br>有些事情在这个月能不做最好不要做，例如搬家，去河边海边游泳，去医院探望病人，看尸体，参加白事，对视尸体的眼睛，说脏话，在野外树林里便溺，在野外树林河边海边的车内做那种事情<br>本月给鬼施食，捐寿盒，都能获得回报。</p><p>七月初一全素食，七月七日凌晨1点前不睡觉，十月十五这一天很少说话，基本不说话</p><p>七夕的时候，别忘了多喝水，参与体内循环代谢。</p><p>处暑的水好，身体有恙的多喝点水治病，开水生水井水湖水都行。喝白水，越早喝越好 参与体内循环代谢</p><p>伏天是养阳气的时候，空调温度不要太低，不要贪凉，在能承受的范围内多出一些汗，增强大脑对核心温度的调节能力，有助于健康。</p><p>秋冬：人的血压在秋季会逐渐升高，使体内气血更高效的到达全身各处以应对即将到来的寒冬，吃同样的东西，这个季节身体吸收的最快，所以秋冬之交养生效果最佳，是进补的季节。</p><p>【九九重阳禁忌】今日乃道佛二家一年难得几次的宜开光加持之日！<br>今日娃子们当尽孝心，忌对外送物！不可嫁娶，不可参加婚宴，不可兴土木！切记。桑拓木，满执位，冲马煞南！娃娃们要理发做头发的，今天最好不过了，除晦气煞气也！今日切忌不可安床！不可动家里床位！还有，今日万万不可入不认识的人的家中！大凶！</p><p>延寿的方法是每天吃饭必有一顿白米饭，一天吃的食物种类不会少于十种，每逢七月初一全素食，七月七日凌晨1点前不睡觉，十月十五这一天很少说话，基本不说话。</p><p><strong>拜斗</strong></p><p><strong>冬至提醒</strong></p><p>明年一年的身体健康与否，取决于你今晚子时体内阳气生发得是否旺盛，所以今晚万万不可熬夜，白天宜温补。19点后尽量少吃东西少喝水，23-5点最好不要小便，以免走失子时刚刚生发的弱阳。</p><p>冬至前后，节令转移，磁场、电波自然震动，要保持良好的心境，戒烦戒燥。<br>冬至温补羊肉为佳。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
          <category> 生活常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 节气 </tag>
            
            <tag> 生活习俗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这个时代“寒门再难出贵子”</title>
      <link href="/article/98fdd8aa.html"/>
      <url>/article/98fdd8aa.html</url>
      
        <content type="html"><![CDATA[<p>最近刚读了天涯上的一篇帖子讨论这个时代为什么寒门再难出贵子，里面很多观点可以让自己反思为什么总是迷茫和受挫，从而更好地前行，愿我们每个人都可以跳出自我局限，从而成长为更好的自己。</p><span id="more"></span><p>读完感受，一个人的出身是影响发展的很重要的因素，但不是唯一的，下面的摘录：</p><p>在一个物欲横流的时代，当金钱决定一切，成为人得终极信仰的时候，这时候也是“门阀”，阶层相应出现的年代。马克思说过：阶级一旦形成，那么处于各个阶级的人想打破阶级的鸿沟壁垒几乎不可能。</p><p>家庭条件差些大多都是有些狡黠的，做事心理有很大的计算过程，这个计算过程对父母来讲是好事，比较节省，但是对自己发展，交友，人生态度是一个很大的思维框架，往往会跟随自己的一生……</p><p>如何活是一个问题，无非就是轻松简单点，安稳点，保障高点，很多孩子也包括当年的楼主在学校的时候，觉得心比天高，但是到了社会上摔打几年，有发现这个江山真是铁打得，社会不是那么好混的，很重要的一点在即将毕业将要选择进行什么工作的时候，真的需要精心来思虑一段时间，包括我们这些成年的面临跳槽，同样需要认真的去思考，指导这个思考最重要的就是一定要有自知之明，一定要明白自己的条件，自己的能力，自己的背景，这里面不能有半点幻想的成分……</p><p><strong>人生很有意思，你怎么对它，它怎么对待你，你拿人生开玩笑，不认真，人生立马偿还你一个你的人生是笑话，你如果选择不认真，那么立马人生就对你不认真，其实人生在某种可控范围内是可以规划的。</strong></p><p>一个人也许一辈子两家事最重要。第一：是去找一份工作，一份待遇较好，有发展前途的工作。第二，是选择一个他或者她结婚。。。在这两项中，告诉你，工作不会抛弃你，工作能养活你，让你活着不用靠人施舍，当你的工作处理好了，婚姻是一个自然的过程的，但是如果你要是想着先成家，再立业，我会告诉你，我身边有朋友因为颠倒了顺序现在离婚了。</p><p>人是靠本能和欲望活着的，婚姻是一个相互交换，相互承诺的本质，构成是两个人，这里而是有利益衡量的，如果婚姻的天平不是那么平衡了，要么一个人永远受气，要不不受气就是分手。我们的社会已经不再是30年前，结婚了就是一辈子，了解这些，做好自己，婚姻也差不到那里……</p><p>学习的真正作用——储备知识，锻炼思维，进而增强能力，获取更多你身边人不具备，不会，不懂得知识。因为是这样你可以从做父母，身边人，周围人做不了的事情，你积累的越多的知识，掌握越多的思维技巧，你就会脱颖而出。遗憾的是多数家长理解不了学习的目的是淘汰不学习的，学习好的目的是淘汰学习不好的。教育，小学，初中，高中，大学，研究生，一级一级实际上是个完美的淘汰制度。</p><p>十几年的学习的真正作用——储备知识，锻炼思维，进而增强能力。真正的目的在于建立良好的思维习惯，而不是学习得了多少分，上了哪个学校……</p><p>多数人在为了一份薪水，或者为了自己创业那点小生意，起早贪黑，可是他们真的很卖力，真的很贫穷，为什么还是那么艰辛？其实重要的是，忽略了努力是需要有方向的，需要有指导的，如果在一个错误的思维指导下，也许累死你的努力换来的就是一个只能糊口微薄收入，谈何改变自己，付出真的就有回报吗？前提是你的付出是正确的付出，要不在努力付出自己也只是一个机器，一个日复一日损耗生命力换取微薄薪资挣扎在生存线的悲哀一族。</p><p>有多少律师在自己家办公？有多少律师满处散发名片？有多少律师在苦苦挣扎？这些人不努力吗？这些人在学校也是好学生，踏入社会也玩命的努力，但是为什么还过得那么艰辛？是因为什么？是没有跟对人，是没有做对事，绝对不能说他们不努力！也恰恰因为这样，“努力就有回报”成了一个骗局。因为努力就有回报是有前提条件的，前提条件，是要跟对人，是要人给你机会，是要做对事，如果忽略了这些前提，努力不但没有回报，努力会让你让越走越错，越努力越限制。正如著名拿破仑的论点：“愚蠢而又勤奋的人，绝对不能任用。”什么是愚蠢的人？要是真的愚蠢就不烦恼了，拿破仑的愚蠢是有着错误思维的那群人，一开始就忽略了正确的思维，在那里抱残守缺坚守着，还在这个方向上一直勤奋耕耘，除了错上加错，没有别的任何结局。跟对人，做对事，在一个完善的思维才有可能使得努力成为回报，要不然真的是抱残守缺成了愚蠢而又勤奋，那种就是绝对会失败，绝对不会被拿破仑任用的那群人。</p><p>家庭才是性格的养成地。思维的形成，做人做事的外延内涵的思维框架一直有着家庭成长环境的烙印。性格决定命运，思维决定发展，人的机遇决定一切。</p><p>为每个成功人士，每个成功机会都是有着当初的时代背景，社会发展机遇，和个人机遇作为强力辅助形成了这是优秀人物的人生辉煌。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
          <category> 个人成长 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 天涯论坛 </tag>
            
            <tag> 摘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础篇（一）-- 十分钟学会基础语法</title>
      <link href="/article/175d115.html"/>
      <url>/article/175d115.html</url>
      
        <content type="html"><![CDATA[<p>Python 作为现在特别流行的编程语言，本文将带你走进 Python 的世界，首先介绍 Python 的语言特性以及如何学号 Python 编程，接着讲解 Python 基本编程，从而让我们实现简单的交互式编程和脚本式编程。</p><span id="more"></span><h1 id="1-Python简介"><a href="#1-Python简介" class="headerlink" title="1 Python简介"></a>1 Python简介</h1><h2 id="1-1-精通一门编程语言的必要性"><a href="#1-1-精通一门编程语言的必要性" class="headerlink" title="1.1 精通一门编程语言的必要性"></a>1.1 精通一门编程语言的必要性</h2><p>随着信息技术的发展，计算机技术应用越来越广泛，目前主流领域如下：</p><ul><li><font color=#9900CC><strong>科学计算：</strong></font>是现代计算机应用的一个重要领域；</li><li><font color=#9900CC><strong>数据处理：</strong></font>用计算机来加工、管理与操作任何形式的数据资料，主要包括数据的采集、转换、分组、组织、计算、排序、存储、检索等；</li><li><font color=#9900CC><strong>人工智能：</strong></font>用计算机来模仿人的智能，使计算机具有识别语言、文字、图形和进行推理、学习以及适应环境的能力；</li><li><font color=#9900CC><strong>网络应用：</strong></font>在信息共享、文件传输、电子商务等领域迅速发展。</li><li><font color=#9900CC><strong>辅助技术：</strong></font>用计算机辅助进行工程设计、产品制造、性能测试，可以使设计工作半自动化或自动化；</li><li><font color=#9900CC><strong>过程控制：</strong></font>用计算机作为控制部件对单台设备或整个生产过程进行控制；</li></ul><h2 id="1-2-Python是什么"><a href="#1-2-Python是什么" class="headerlink" title="1.2 Python是什么"></a>1.2 Python是什么</h2><p><strong>Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</strong> Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字和一些标点符号，它具有比其他语言更有特色的语法结构。</p><ul><li><p>Python 是一种 <font color=#9900CC><strong>解释型语言：</strong></font>开发过程中没有了编译这个环节，类似于PHP和Perl语言；</p></li><li><p>Python 是 <font color=#9900CC><strong>交互式语言：</strong></font>可以在一个 Python 提示符 &gt;&gt;&gt; 后直接执行代码；</p></li><li><p>Python 是 <font color=#9900CC><strong>面向对象语言：</strong></font>Python支持面向对象的风格或代码封装在对象的编程技术；</p></li><li><p>Python 是 <font color=#9900CC><strong>初学者的语言：</strong></font>Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到浏览器再到游戏。</p></li></ul><blockquote><p> <font color=#9900CC><strong>编译型语言：</strong></font>通过专门的编译器，将所有源代码一次性转换成特定平台（Windows、Linux 等）执行的机器码（以可执行文件的形式存在）。<br> <font color=#9900CC><strong>解释型语言：</strong></font>由专门的解释器，根据需要将部分源代码临时转换成特定平台的机器码。<br>想要了解更多，请参考：<a href="http://c.biancheng.net/view/4136.html">编译型语言和解释型语言的区别</a></p></blockquote><h2 id="1-3-Python语言特点"><a href="#1-3-Python语言特点" class="headerlink" title="1.3 Python语言特点"></a>1.3 Python语言特点</h2><p><strong>1、面向对象</strong></p><p><strong>Python语言具有很强的面向对象特性，简化了面向对象的实现，它消除了保护类型、抽象类、接口等面向对象的元素，使得面向对象的概念更容易理解。</strong></p><p><strong>2、内置的数据结构</strong></p><p>Python提供了一些内置的数据结构，这些数据结构实现了类似Java中集合类的功能。内置数据结构的出现简化了程序设计。<strong>Python的数据结构包括元组、列表、字典、集合等。</strong> 元组相当于“只读”的数组，列表可以作为可变长度的数组使用，字典相当于Java中的HashTable类型。</p><p><strong>3、简洁</strong></p><p>Python语言的关键字比较少，它没有分号、begin、 end等标记，代码块使用空格或Tab键缩进的方式来分隔。此外，<strong>Python代码简洁、短小、易于阅读。</strong> Python简化了循环语句，即使程序结构很复杂也能快速读懂。</p><p><strong>4、健壮</strong></p><p><strong>Python提供了异常处理机制，能捕获程序的异常情况。</strong> 此外Python的堆栈跟踪对象能够指出程序出错的位置和出错的原因。异常机制能够避免不安全退出的情况，同时能够帮助程序员调试程序。</p><p><strong>5、跨平台</strong></p><p>Python会先被编译为与平台相关的二进制代码，然后再解释执行。这种方式类似于Java，但Python的执行速度提高了。<strong>Python编写的应用程序可以运行在Windows、Unix、Linux等不同的操作系统上。</strong> 在一种操作系统上编写的Python代码只需做少量修改，就可移植到其他的操作系统上。</p><p><strong>6、可扩展</strong></p><p>Python是采用C开发的语言，因此可以使用C扩展Python，可以给Python添加新的模块、新的类。同时Python可以嵌入C、C++语言开发项目中，使程序具备脚本语言的特性。因此，<strong>Python 又常被称为“胶水”语言。</strong></p><p><strong>7、动态性</strong></p><p>Python 与JavaScript、PHP、Perl等语言类似，<strong>它不需要另外声明变量、直接赋值即可创建一个新的变量。</strong></p><p><strong>8、强类型语言</strong></p><p>Python的变量创建后会对应一种类型，它可根据赋值表达式的内容决定变量的类型。Python在内部建立了管理这些变量的机制，不同类型的变量需要类型转换。</p><p><strong>9、应用广泛</strong></p><p><strong>Python语言应用于数据库、网络、图形图像、数学计算、Web开发、操作系统扩展等领域。</strong> 有许多第三方库支持Python，例如：PIL（图像处理库）、Tkinter（创建图形用户界面）、Django（交互式网站）、Pygame（2D动画）、SCIPy（科学计算）、Twisted（网络编程）等。</p><p>Python的以上特性使得软件的代码大幅度减少，开发任务进一步简化，我们编程的关注点不再是语言特性，而是程序所要实现的任务。</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/001.2fy4k52udl0k.webp#pic_center" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/001.2fy4k52udl0k.webp#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" width="80%"><h2 id="1-4-Python的应用领域"><a href="#1-4-Python的应用领域" class="headerlink" title="1.4 Python的应用领域"></a>1.4 Python的应用领域</h2><p>Python 通常应用于编写下述应用程序：</p><ul><li><font color=#9900CC><strong>脚本</strong></font>——这些简短的程序自动执行常见的管理任务，如在系统中新增用户、将文件上传到网站、在不使用浏览器的情况下下载网页等。</li><li><font color=#9900CC><strong>网站开发</strong></font>——作为快速创建动态网站的工具，Django、Bottle和Tope等Python项目深受开发人员欢迎。</li><li><font color=#9900CC><strong>文本处理</strong></font>——Python在字符串和文本文件处理方面提供了强大的支持。</li><li><font color=#9900CC><strong>图像处理</strong></font>——如PIL库(目前已不再维护，取而代之的有Pillow)科学计算。网上有许多卓越的Python科学计算库，提供了用以统计、数学计算和绘图的函数。如：NumPy 。</li><li><font color=#9900CC><strong>教育</strong></font>——鉴于Python简洁实用，越来越多的学习将其作为第一门编程教学语言。</li></ul><p>Python的主要运用领域有：</p><ul><li><font color=#9900CC><strong>云计算：</strong></font>云计算最热的语言，典型的应用OpenStack；</li><li><font color=#9900CC><strong> WEB应用开发：</strong></font>许多优秀的WEB框架，许多大型网站是Python开发、YouTube、Dropbox、Douban……典型的Web框架包括：Django、flask、TurboGears、web2py 等等；</li><li><font color=#9900CC><strong>科学计算和人工智能：</strong></font>Python 在人工智能领域内的机器学习、神经网络、深度学习等方面，都是主流的编程语言， 此外，Python擅长进行科学计算和数据分析，支持各种数学运算，可以绘制出更高质量的 2D 和 3D 图像；</li><li><font color=#9900CC><strong>自动化运维：</strong></font>系统操作和维护，通常情况下，Python 编写的系统管理脚本，无论是可读性，还是性能、代码重用度以及扩展性方面，都优于普通的 shell 脚本；</li><li><font color=#9900CC><strong>金融：</strong></font>定量交易、金融分析，在金融工程领域，Python使用越来越广泛；</li><li><font color=#9900CC><strong>图形 GUI：</strong></font>PyQT，WXPython，TkInter；</li><li>Python在<font color=#9900CC><strong>网络爬虫、游戏开发、机器人控制编程</strong></font>等领域也有广泛应用。</li></ul><h2 id="1-5-Python编程环境搭建"><a href="#1-5-Python编程环境搭建" class="headerlink" title="1.5 Python编程环境搭建"></a>1.5 Python编程环境搭建</h2><ol><li><p><font color=#9900CC><strong> Window 平台安装 Python：</strong></font>打开浏览器访问：<a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a> ，点击下载 executable installer，x86 表示是 32 位的安装程序，x86-64 表示 64 位的。详细安装过程，请参考：<a href="http://c.biancheng.net/view/4161.html">http://c.biancheng.net/view/4161.html</a></p></li><li><p><font color=#9900CC><strong>Unix &amp; Linux 平台安装 Python3：</strong></font>打开浏览器访问：<a href="https://www.python.org/downloads/source/">https://www.python.org/downloads/source/</a>，选择适用于 Unix&#x2F;Linux 的源码压缩包，然后解压缩并安装。详细安装过程，请参考：<a href="http://c.biancheng.net/view/4162.html">http://c.biancheng.net/view/4162.html</a></p></li><li><p><font color=#9900CC><strong>MAC平台安装Python3：</strong></font>打开浏览器访问：<a href="https://www.python.org/downloads/mac-osx/">https://www.python.org/downloads/mac-osx/</a>，下载最新版安装即可。</p></li></ol><p>安装完成之后，需要<font color=#9900CC><strong>配置环境变量，</strong></font>详细过程可以参考：<a href="https://www.runoob.com/python3/python3-install.html">Python3 环境搭建</a></p><p>此外，还推荐下载其他IDE进行Python编程，IDE 是 Intergreated Development Environment 的缩写，中文称为集成开发环境，用来表示辅助程序员开发的应用软件。换言之，<strong>集成开发环境就是一系列开发工具的组合套装。</strong> 一般情况下，程序员可选择的 IDE 类别是很多的，比如说，用 Python 语言进行程序开发，既可以选用 Python 自带的 IDLE，也可以选择使用 PyCharm 和 Notepad++ 作为 IDE。</p><ul><li>PyCharm下载和安装教程（包含Python解释器）：<a href="http://c.biancheng.net/view/5804.html">http://c.biancheng.net/view/5804.html</a></li><li>Python Eclipse+PyDec下载和安装教程：<a href="http://c.biancheng.net/view/5810.html">http://c.biancheng.net/view/5810.html</a></li><li>Python VS Code下载和安装教程：<a href="http://c.biancheng.net/view/5813.html">http://c.biancheng.net/view/5813.html</a></li></ul><h2 id="1-6-Python学习"><a href="#1-6-Python学习" class="headerlink" title="1.6 Python学习"></a>1.6 Python学习</h2><p>下面推荐几篇内容不错的关于Python学习路线和不同方向的进阶教程，有时间可以对照一下，看看自己还有多长的路要走。</p><ol><li><a href="https://blog.csdn.net/u014044812/article/details/88079011?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161843724916780261926748%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161843724916780261926748&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-88079011.pc_search_result_hbase_insert&utm_term=python&spm=1018.2226.3001.4187">Python学习路线（2021修正版）</a></li><li><a href="https://blog.csdn.net/xufive/article/details/102993570?ops_request_misc=&request_id=&biz_id=102&utm_term=python&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-102993570.pc_search_result_hbase_insert&spm=1018.2226.3001.4187">致Python初学者</a></li><li><a href="https://blog.csdn.net/luanpeng825485697/article/details/78347433?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161843724916780271586245%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161843724916780271586245&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-9-78347433.pc_search_result_hbase_insert&utm_term=python&spm=1018.2226.3001.4187">python系列文章(基础，应用，后端，运维，自动化测试，爬虫，数据分析，可视化，机器学习，深度学习系列内容)</a></li><li><a href="https://blog.csdn.net/weixin_44318830/article/details/103739987?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161843724916780271586245%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161843724916780271586245&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-18-103739987.pc_search_result_hbase_insert&utm_term=python&spm=1018.2226.3001.4187">全网最全Python学习路线图+14张思维导图</a></li></ol><hr><h1 id="2-基础语法"><a href="#2-基础语法" class="headerlink" title="2 基础语法"></a>2 基础语法</h1><h2 id="2-1-标识符"><a href="#2-1-标识符" class="headerlink" title="2.1 标识符"></a>2.1 标识符</h2><p>标识符主要作用就是作为变量、函数、类、模块以及其他对象的名称，<strong>Python 中标识符的命名不是随意的，而是要遵守一定的命令规则，</strong> 如下：</p><ol><li>标识符对大小写敏感，且第一个字符必须是字母表中字母或下划线 _ 。</li><li>标识符的其他的部分由字母、数字和下划线组成。</li><li>标识符不能和 Python 中的保留字相同。</li><li>标识符中不能包含空格、@、% 以及 $ 等特殊字符。</li></ol><blockquote><p>在Python中，以下划线开头的标识符有特殊含义，如下</p><ul><li>以单下划线开头的标识符（如 _width），表示不能直接访问的类属性，其无法通过 from…import* 的方式导入；</li><li>以双下划线开头的标识符（如__add）表示类的私有成员；</li><li>以双下划线作为开头和结尾的标识符（如 __init__），是专用标识符。<br>综上，除非特定场景需要，应避免使用以下划线开头的标识符。</li></ul></blockquote><p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了，但我们应尽量避免使用汉字作为标识符，容易遇到奇葩的错误。</p><blockquote><p>不同场景中的标识符，其名称也有一定的规范可循，具体如下：</p><ul><li>当标识符用作模块名时，应尽量短小，并且全部使用小写字母，可以使用下划线分割多个字母，例如 game_mian、game_register 等。</li><li>当标识符用作包的名称时，应尽量短小，也全部使用小写字母，不推荐使用下划线，例如 com.mr、com.mr.book 等。</li><li>当标识符用作类名时，应采用单词首字母大写的形式。例如，定义一个图书类，可以命名为 Book。</li><li>模块内部的类名，可以采用 “下划线+首字母大写” 的形式，如 _Book；</li><li>函数名、类中的属性名和方法名，应全部使用小写字母，多个单词之间可以用下划线分割；</li><li>常量命名应全部使用大写字母，单词之间可以用下划线分割；</li></ul></blockquote><h2 id="2-2-关键字"><a href="#2-2-关键字" class="headerlink" title="2.2 关键字"></a>2.2 关键字</h2><p>关键字即保留字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> keyword</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keyword.kwlist</span><br><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>温馨提示：</strong> 开发程序时，不能将保留字作为变量、函数、类、模块和其他对象的名称来使用。在<code>Python</code>中，所有保留字区分大小写。</p><h2 id="2-3-字符编码"><a href="#2-3-字符编码" class="headerlink" title="2.3 字符编码"></a>2.3 字符编码</h2><p>为了规范页面编码，方便他人了解文件所用编码，建议在文件中使用中文编码声明注释。默认情况下，<strong>Python3源码文件以“可变长编码”的UTF-8编码，所有字符串都是unicode字符串。</strong> UTF-8编码把一个<code>Unicode</code>字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。了解更多，可以参考：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017075323632896">ASCII、GB2312、Unicode、UTF-8编码</a><br>在Linux下为源码文件指定编码方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><h2 id="2-4-代码规范"><a href="#2-4-代码规范" class="headerlink" title="2.4 代码规范"></a>2.4 代码规范</h2><p><strong>1、注释</strong></p><p>注释（Comments）用来向用户提示或解释某些代码的作用和功能，它可以出现在代码中的任何位置。Python 解释器在执行代码时会忽略注释，不做任何处理，就好像它不存在一样。Python中单行注释以 <code>#</code> 开头，多行注释可以用多个<code>#</code>，也可以使用<code>&#39;&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;</code>，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>) <span class="comment"># 第二个注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第三个注释</span></span><br><span class="line"><span class="string">第四个注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第五注释</span></span><br><span class="line"><span class="string">第六注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>温馨提示：</strong> Python 多行注释不支持嵌套。添加注释时，一定要有意义，即注释能充分解释代码的功能及用途。注释除了可以解释代码的功能与用途，也可以用于临时注释不想执行的代码。</p><p><strong>2、行与缩进</strong></p><p><code>Python</code>最具特色的就是使用缩进来表示代码块，不需要使用大括号<code>&#123; &#125;</code>。<code>Python</code>对代码缩进要求非常严格，同一级别的代码块缩进必须相同。如果不采用合理的代码缩进，将抛出<code>SyntaxError</code>异常。<strong>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数，通常情况下是采用 4 个空格长度作为一个缩进量（默认情况下，一个 Tab 键就表示 4 个空格）。</strong> 示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>：</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。将首行及后面的代码组称为一个子句(clause)。</p></blockquote><p><strong>3、多行语句</strong></p><p>Python通常是一行写完一条语句，但如果语句很长，我们可以使用<strong>右反斜杠（\）</strong> 来实现多行语句，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">item_two + \</span><br><span class="line">item_three</span><br></pre></td></tr></table></figure><p>在[]，{}，或（）中的多行语句，不需要使用反斜杠（\），例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total = [<span class="string">&#x27;item_one&#x27;</span>, <span class="string">&#x27;item_two&#x27;</span>, <span class="string">&#x27;item_three&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;item_four&#x27;</span>, <span class="string">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure><p>Python可以在同一行中使用多条语句，语句之间使用分号(;)分割，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math; <span class="built_in">print</span>(math.<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p><strong>4、空行</strong></p><p><strong>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</strong></p><p>空行与代码缩进不同，空行并不是<code>Python</code>语法的一部分。书写时不插入空行，<code>Python</code>解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p><blockquote><p>Python 采用 <a href="https://www.python.org/dev/peps/pep-0008/">PEP 8</a> 作为编码规范，其中 PEP 是 Python Enhancement Proposal（Python 增强建议书）的缩写，8 代表的是 Python 代码的样式指南。下面列出PEP 8 中初学者应严格遵守的一些编码规则：</p><ol><li>每个 import 语句只导入一个模块，尽量避免一次导入多个模块。</li><li>不要在行尾添加分号，也不要用分号将两条命令放在同一行。</li><li>建议每行不超过 80 个字符，如果超过，建议使用小括号将多行内容隐式的连接起来，而不推荐使用反斜杠 \ 进行连接。（例外：导入模块的语句过长；注释里的URL）</li><li>使用必要的空行可以增加代码的可读性，通常在顶级定义（如函数或类的定义）之间空两行，而方法定义之间空一行，另外在用于分隔某些功能的位置也可以空一行。</li><li>通常情况下，在运算符两侧、函数参数之间以及逗号两侧，都建议使用空格进行分隔。</li><li>应该避免在循环中使用“+”和“&#x3D;”运算符累加字符串。这是因为字符串是不可变的，这样做会创建不必要的临时对象。推荐将每个子字符串加入列表，然后在循环结束后使用<code>join()</code>方法连接列表。</li><li>适当使用异常处理结构提高程序容错性，但不能过多依赖异常处理结构，适当的显式判断还是必要的。</li></ol></blockquote><p><strong>5、命名规范</strong></p><ul><li>模块名尽量短小，并且全部使用小写字母，可以使用下划线分隔多个字母。例如，<code>game_main</code>、<code>game_register</code>、<code>bmiexponent</code>都是推荐使用的模块名称。</li><li>包名尽量短小，并且全部使用小写字母，不推荐使用下划线。例如，<code>com.mingrisoft</code>、<code>com.mr</code>、<code>com.mr.book</code>都是推荐使用的包名称，而<code>com_mingrisoft</code>就是不推荐的。</li><li>类名采用单词首字母大写形式(即<code>Pascal</code>风格)。例如，定义一个借书类，可以命名为BorrowBooke。</li><li>模块内部的类采用下划线“_”+<code>Pascal</code>风格的类名组成。例如，在<code>BorrowBook</code>类中的内部类，可以使用<code>_BorrowBook</code>命名。</li><li>函数、类的属性和方法的命名规则同模块类似，也是全部使用小写字母，多个字母间用下划线“_”分隔。</li><li>常量命名时全部使用大写字母，可以使用下划线。</li><li>使用单下划线“_”开头的模块变量或者函数是受保护的，在使用<code>from xxx import *</code>语句从模块中导入时这些变量或者函数不能被导入。</li><li>使用双下划线“_”开头的实例变量或方法是类私有的。</li></ul><h2 id="2-5-导入模块"><a href="#2-5-导入模块" class="headerlink" title="2.5 导入模块"></a>2.5 导入模块</h2><p>模块就是<code>Python</code>程序，<strong>在<code>Python</code>中导入模块后，我们就可以使用该模块里定义的类、方法或者变量，这样既可以提高代码的可重用性，又可以避免变量冲突，我们通常用 <code>import</code> 或者 <code>from...import</code> 来导入相应的模块。</strong> 像<code>def</code>一样，<code>import</code> 和 <code>from</code> 是可执行的语句，他们可以出现在 <code>if</code> 中，可以出现在函数中，执行到这些语句的时候才会进行解析，换句话说，被导入的模块和变量名只有在对应的 <code>import</code> 或 <code>from</code> 语句执行后才可以使用。</p><blockquote><p>  模块，可以理解为是对代码更高级的封装，即把能够实现某一特定功能的代码编写在同一个 .py 文件中，并将其作为一个独立的模块，这样既可以方便其它程序或脚本导入并使用，同时还能有效避免函数名和变量名发生冲突。</p></blockquote><p><strong>1、import语句</strong></p><p>既可以一行导入单个模块，也可以一行内导入多个模块，这里以常用的 <code>math</code> 和 <code>random</code> 模块为例，具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math<span class="comment"># 导入math整个模块</span></span><br><span class="line"><span class="built_in">print</span>(math.pi)<span class="comment"># 使用math模块名作为前缀来访问模块中的成员</span></span><br></pre></td></tr></table></figure><p>一次导入多个模块，多个模块之间用逗号隔开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math,random<span class="comment"># 导入math、random两个模块</span></span><br><span class="line"><span class="built_in">print</span>(math.pi)<span class="comment"># 输出π的近似值，十五位小数</span></span><br><span class="line"><span class="built_in">print</span>(random.random())<span class="comment"># 生成一个[0, 1.0)的随机小数</span></span><br></pre></td></tr></table></figure><blockquote><p>Python 不建议一行 import 所有模块，而是推荐用多行 import 来导入模块。更多的是出于操作便利性的原因，与代码本身无关，这样更易于阅读；更易于编辑；更易于维护。</p></blockquote><blockquote><p>import工作方式：Python会在两个地方寻找这个模块，第一个地方是在sys.path（可以运行代码import sysprint(sys.path)查看），一般安装的Python库的目录都可以在sys.path中找到（要将Python的安装目录添加到电脑的环境变量），对于安装好的库，我们直接import即可。第二个地方就是运行文件所在的目录。如果在一个模块的顶层导入，那么它的作用域就是全局的；如果在函数中导入，那么它的作用域是局部的。 如果模块是被第一次导入，它将被加载并执行。</p></blockquote><p><strong>2、import-as</strong></p><p>导入整个模块时，也可以为模块指定别名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> m<span class="comment"># 导入math整个模块，并制定别名为m</span></span><br><span class="line"><span class="built_in">print</span>(m.pi)<span class="comment"># 使用m模块别名作为前缀来访问模块中的成员</span></span><br></pre></td></tr></table></figure><p>在导入多个模块时，也可以为模块指定别名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> m, random <span class="keyword">as</span> ran<span class="comment"># 导入math、random两个模块，并为math指定别名m，为random指定别名ran</span></span><br><span class="line"><span class="built_in">print</span>(m.pi)</span><br><span class="line"><span class="built_in">print</span>(ran.random())</span><br></pre></td></tr></table></figure><p><strong>3、from-import</strong></p><p>下面使用 <code>from...import</code> 导入指定成员，即把指定成员导入到当前作用域，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi<span class="comment"># 导入math模块的pi成员</span></span><br><span class="line"><span class="built_in">print</span>(pi)<span class="comment"># 使用导入成员的语法，直接使用成员名访问</span></span><br></pre></td></tr></table></figure><p>导入模块成员时，也可以为成员指定别名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi <span class="keyword">as</span> P<span class="comment"># 导入math模块的pi成员，并指定别名P</span></span><br><span class="line"><span class="built_in">print</span>(P)<span class="comment"># 使用导入成员（并指定别名）的语法，直接使用成员的别名访问</span></span><br></pre></td></tr></table></figure><p><code>form...import</code> 导入模块成员时，支持一次导入多个成员，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi, sqrt<span class="comment"># 导入math模块的pi，sqrt成员</span></span><br><span class="line"><span class="built_in">print</span>(pi)<span class="comment"># 使用导入成员的语法，直接使用成员名访问</span></span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>一次导入多个模块成员时，也可指定别名，同样使用 as 关键字为成员指定别名，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi <span class="keyword">as</span> P, sqrt <span class="keyword">as</span> sq<span class="comment"># 导入math模块的pi，sqrt成员，并为其指定别名P，sq</span></span><br><span class="line"><span class="built_in">print</span>(P)<span class="comment"># 使用导入成员（并指定别名）的语法，直接使用成员的别名访问</span></span><br><span class="line">paint(sq(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>在使用 <code>from...import</code> 语法时，可以一次导入指定模块内的所有成员（存在不同模块，相同成员名的情况，从而发生冲突，此方式不推荐），如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *<span class="comment"># 导入math棋块内的所有成员</span></span><br><span class="line"><span class="built_in">print</span>(pi)<span class="comment"># 使用导入成员的语法，直接使用成员名访问</span></span><br><span class="line"><span class="built_in">print</span>(sqrt(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><blockquote><p>只在两种场合下建议使用这样的方法，一个场合是：目标模块中的属性非常多，反复键入模块名很不方便，例如 Tkinter (Python&#x2F;Tk) 和 NumPy (Numeric Python) 模块，可能还有 socket 模块。另一个场合是在交互解释器下，这样可以减少输入次数。</p></blockquote><h2 id="2-6-输入输出"><a href="#2-6-输入输出" class="headerlink" title="2.6 输入输出"></a>2.6 输入输出</h2><p><code>input()</code>是 Python 的内置函数，用于从控制台读取用户输入的内容。**<code>input()</code>函数总是以字符串的形式来处理用户输入的内容，所以用户输入的内容可以包含任何字符。**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)<span class="comment"># 数据以字符串的形式返回</span></span><br><span class="line">number1 = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入数字：&quot;</span>)<span class="comment"># eval()去掉&quot; &quot;，将字符串转化为有效的表达式，来求值，并返回计算结果，和str()功能刚好相反</span></span><br><span class="line">number2 = val(<span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;val() 函数当识别到非数字，停止读入字符串,字符串中的空格和换行符会被去掉。即如果字符串内有字母或其他非数字字符，</span></span><br><span class="line"><span class="string">val()函数只转换第一个非数字字符之前的数字。当字符串的首字符为非数字时，返回值为0。该函数也可以识别进制符号&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><code>print()</code> 默认输出是换行的，如果要实现不换行，需要在变量末尾加上 <code>end=&quot; &quot;</code>，输出多个变量时，print() 函数默认以空格隔开多个变量，想要使用不同的分隔符，可以使用缺省参数<code>seq=&#39;:&#39;</code>，可以通过<code>help(&quot;print&quot;)</code>了解更多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;****************&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;网站：&quot;&#123;&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;百度&#x27;</span>, <span class="string">&#x27;www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># str.format()实现字符串格式化，大括号及其里面的字符 (称作格式化字段) 将会被 format() 中的参数替换</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; 和 &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;GitHub&#x27;</span>, <span class="string">&#x27;CSDN&#x27;</span>))<span class="comment"># 括号中的数字用于指向传入对象在format()中的位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你是:%s, %d岁&quot;</span> % (<span class="string">&quot;CSDN&quot;</span>, <span class="number">22</span>)<span class="comment"># % 操作符也可以实现字符串格式化</span></span><br><span class="line"><span class="comment"># 推荐使用str.format()，&#123;&#125;里可以添加可选项：和格式标识符，这样可以对值进行更好的格式化</span></span><br></pre></td></tr></table></figure><blockquote><p>%或者{}都可以看做转换说明符，转换说明符（Conversion Specifier）只是一个占位符，它会被后面表达式（变量、常量、数字、字符串、加减乘除等各种形式）的值代替。</p></blockquote><p><strong>1、%使用</strong></p><center><strong>表1 Python转换说明符</strong></center><table><thead><tr><th>转换说明符</th><th>解释</th></tr></thead><tbody><tr><td>%d、%i</td><td>转换为带符号的十进制整数</td></tr><tr><td>%o</td><td>转换为带符号的八进制整数</td></tr><tr><td>%x、%X</td><td>转换为带符号的十六进制整数</td></tr><tr><td>%e、%E</td><td>转化为科学计数法表示的浮点数（输出e的大小写不一样）</td></tr><tr><td>%f、%F</td><td>转化为十进制浮点数</td></tr><tr><td>%g、%G</td><td>智能选择使用 %f 或 %e 格式</td></tr><tr><td>%c</td><td>格式化字符及其 ASCII 码</td></tr><tr><td>%r</td><td>使用 repr() 函数将表达式转换为字符串</td></tr><tr><td>%s</td><td>使用 str() 函数将表达式转换为字符串</td></tr></tbody></table><p><strong>(1) 整数的输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;%o&#x27;</span> % <span class="number">24</span>)<span class="comment"># 转换为八进制输出</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;%d&#x27;</span> % <span class="number">24</span>）</span><br><span class="line"><span class="number">24</span></span><br></pre></td></tr></table></figure><p><strong>(2) 浮点数的输出</strong></p><ul><li>%f ——默认保留小数点后面六位，例：%.3f，保留3位小数位</li><li>%e ——保留小数点后面六位有效数字，指数形式输出，例：%.3e，保留3位小数位，使用科学计数法</li><li>%g ——在保证六位有效数字的前提下，使用小数方式，否则使用科学计数法，例：%.3g，保留3位有效数字，使用小数或科学计数法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;%.2f&#x27;</span> % <span class="number">6.6666</span>)<span class="comment"># 取3位小数</span></span><br><span class="line"><span class="number">6.666</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;%.3e&#x27;</span> % <span class="number">1.11</span>)<span class="comment"># 取3位小数，用科学计数法</span></span><br><span class="line"><span class="number">1.110e+00</span></span><br></pre></td></tr></table></figure><p><strong>(3) 字符串输出</strong></p><ul><li>%10s——右对齐，占位符10位</li><li>%-10s——左对齐，占位符10位</li><li>%.2s——截取2位字符串</li><li>%10.2s——10位占位符，截取两位字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%10s&#x27;</span> % <span class="string">&#x27;hello&#x27;</span>)<span class="comment"># 右对齐，取10位，不够则补位</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%-10.2s&#x27;</span> % <span class="string">&#x27;hello&#x27;</span>)  <span class="comment"># 左对齐，取10位，并截取两位字符串，并用空格补位</span></span><br></pre></td></tr></table></figure><p><strong>2、format使用</strong></p><p><strong>(1) 位置匹配</strong></p><ul><li>不带编号，即“{}”</li><li>带数字编号，可调换顺序，即“{1}”、“{2}”</li><li>带关键字，即“{key1}”、“{key2}”</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; &#123;1&#125; &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>))<span class="comment"># 带数字编号，并打乱顺序</span></span><br><span class="line">hello world hello</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;&#123;key1&#125; &#123;key2&#125; &#123;key1&#125;&#x27;</span>.<span class="built_in">format</span>(key1=<span class="string">&#x27;world&#x27;</span>, key2=<span class="string">&#x27;hello&#x27;</span>))<span class="comment"># 带关键字</span></span><br><span class="line">world hello world</span><br></pre></td></tr></table></figure><p><strong>(2) 格式转换</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;&#123;:b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">2</span>))<span class="comment"># 转换为二进制输出</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;&#123;:%&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">0.2</span>))<span class="comment"># 将数值乘以100，然后以小数点保留六位格式打印，值后面会有一个百分号</span></span><br><span class="line"><span class="number">20.000000</span>%</span><br></pre></td></tr></table></figure><p><strong>(3) 进阶用法</strong></p><ul><li>指定小数精度和输出宽度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0:8.4f&#125;&#x27;</span>.<span class="built_in">format</span>(pi))<span class="comment"># 位置为0，最小宽度为8，小数点后4位；:m.nf表示宽度为m，小数位为n，m和n都可以不指定</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:10s&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Hello&#x27;</span>))<span class="comment"># 输出字符串的宽度至少为10</span></span><br></pre></td></tr></table></figure><ul><li>指定对齐方式<br>&lt;——左对齐，&gt;——右对齐，^——居中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:^10s&#125; and &#123;:&gt;10s&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Github&#x27;</span>, <span class="string">&#x27;CSDN&#x27;</span>))<span class="comment"># 取10位居中，取10位右对齐</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:*^10&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;CSDN&#x27;</span>))<span class="comment"># 使用*填充</span></span><br></pre></td></tr></table></figure><p>Python格式化输出，了解更多，请参考：<a href="https://www.cnblogs.com/fat39/p/7159881.html">%用法和format用法</a></p><h2 id="2-7-内建函数"><a href="#2-7-内建函数" class="headerlink" title="2.7 内建函数"></a>2.7 内建函数</h2><p>Python 解释器自带的函数叫做内置函数，这些函数可以直接使用，不需要导入某个模块。</p><blockquote><p>内置函数与标准库函数的对比：内置函数是解释器的一部分，它随着解释器的启动而生效；标准库函数是解释器的外部扩展，导入模块以后才能生效。一般来说，内置函数的执行效率要高于标准库函数。</p></blockquote><p>上一小节的 <code>print()</code> 函数就是内置函数，Python 解释器还提供了更多内置函数，以下按字母表顺序列出：</p><center><strong>表2 Python3 内置函数</strong></center><table class="docutils align-default"><colgroup><col style="width: 20%" /><col style="width: 18%" /><col style="width: 20%" /><col style="width: 20%" /><col style="width: 22%" /></colgroup><tbody><tr class="row-even"><td><a class="reference internal" href="#abs" title="abs"><code class="xref py py-func docutils literal notranslate"><span class="pre">abs()</span></code></a></td><td><a class="reference internal" href="#delattr" title="delattr"><code class="xref py py-func docutils literal notranslate"><span class="pre">delattr()</span></code></a></td><td><a class="reference internal" href="#hash" title="hash"><code class="xref py py-func docutils literal notranslate"><span class="pre">hash()</span></code></a></td><td><a class="reference internal" href="#func-memoryview"><code class="docutils literal notranslate"><span class="pre">memoryview()</span></code></a></td><td><a class="reference internal" href="#func-set"><code class="docutils literal notranslate"><span class="pre">set()</span></code></a></p></td></tr><tr class="row-odd"><td><a class="reference internal" href="#all" title="all"><code class="xref py py-func docutils literal notranslate"><span class="pre">all()</span></code></a></td><td><a class="reference internal" href="#func-dict"><code class="docutils literal notranslate"><span class="pre">dict()</span></code></a></td><td><a class="reference internal" href="#help" title="help"><code class="xref py py-func docutils literal notranslate"><span class="pre">help()</span></code></a></td><td><a class="reference internal" href="#min" title="min"><code class="xref py py-func docutils literal notranslate"><span class="pre">min()</span></code></a></td><td><a class="reference internal" href="#setattr" title="setattr"><code class="xref py py-func docutils literal notranslate"><span class="pre">setattr()</span></code></a></td></tr><tr class="row-even"><td><a class="reference internal" href="#any" title="any"><code class="xref py py-func docutils literal notranslate"><span class="pre">any()</span></code></a></td><td><a class="reference internal" href="#dir" title="dir"><code class="xref py py-func docutils literal notranslate"><span class="pre">dir()</span></code></a></td><td><a class="reference internal" href="#hex" title="hex"><code class="xref py py-func docutils literal notranslate"><span class="pre">hex()</span></code></a></td><td><a class="reference internal" href="#next" title="next"><code class="xref py py-func docutils literal notranslate"><span class="pre">next()</span></code></a></td><td><a class="reference internal" href="#slice" title="slice"><code class="xref py py-func docutils literal notranslate"><span class="pre">slice()</span></code></a></td></tr><tr class="row-odd"><td><a class="reference internal" href="#ascii" title="ascii"><code class="xref py py-func docutils literal notranslate"><span class="pre">ascii()</span></code></a></p></td><td><a class="reference internal" href="#divmod" title="divmod"><code class="xref py py-func docutils literal notranslate"><span class="pre">divmod()</span></code></a></p></td><td><a class="reference internal" href="#id" title="id"><code class="xref py py-func docutils literal notranslate"><span class="pre">id()</span></code></a></p></td><td><a class="reference internal" href="#object" title="object"><code class="xref py py-func docutils literal notranslate"><span class="pre">object()</span></code></a></p></td><td><a class="reference internal" href="#sorted" title="sorted"><code class="xref py py-func docutils literal notranslate"><span class="pre">sorted()</span></code></a></p></td></tr><tr class="row-even"><td><a class="reference internal" href="#bin" title="bin"><code class="xref py py-func docutils literal notranslate"><span class="pre">bin()</span></code></a></p></td><td><a class="reference internal" href="#enumerate" title="enumerate"><code class="xref py py-func docutils literal notranslate"><span class="pre">enumerate()</span></code></a></p></td><td><a class="reference internal" href="#input" title="input"><code class="xref py py-func docutils literal notranslate"><span class="pre">input()</span></code></a></p></td><td><a class="reference internal" href="#oct" title="oct"><code class="xref py py-func docutils literal notranslate"><span class="pre">oct()</span></code></a></p></td><td><a class="reference internal" href="#staticmethod" title="staticmethod"><code class="xref py py-func docutils literal notranslate"><span class="pre">staticmethod()</span></code></a></p></td></tr><tr class="row-odd"><td><a class="reference internal" href="#bool" title="bool"><code class="xref py py-func docutils literal notranslate"><span class="pre">bool()</span></code></a></p></td><td><a class="reference internal" href="#eval" title="eval"><code class="xref py py-func docutils literal notranslate"><span class="pre">eval()</span></code></a></p></td><td><a class="reference internal" href="#int" title="int"><code class="xref py py-func docutils literal notranslate"><span class="pre">int()</span></code></a></p></td><td><a class="reference internal" href="#open" title="open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a></p></td><td><a class="reference internal" href="#func-str"><code class="docutils literal notranslate"><span class="pre">str()</span></code></a></p></td></tr><tr class="row-even"><td><a class="reference internal" href="#breakpoint" title="breakpoint"><code class="xref py py-func docutils literal notranslate"><span class="pre">breakpoint()</span></code></a></p></td><td><a class="reference internal" href="#exec" title="exec"><code class="xref py py-func docutils literal notranslate"><span class="pre">exec()</span></code></a></p></td><td><a class="reference internal" href="#isinstance" title="isinstance"><code class="xref py py-func docutils literal notranslate"><span class="pre">isinstance()</span></code></a></p></td><td><a class="reference internal" href="#ord" title="ord"><code class="xref py py-func docutils literal notranslate"><span class="pre">ord()</span></code></a></p></td><td><a class="reference internal" href="#sum" title="sum"><code class="xref py py-func docutils literal notranslate"><span class="pre">sum()</span></code></a></p></td></tr><tr class="row-odd"><td><a class="reference internal" href="#func-bytearray"><code class="docutils literal notranslate"><span class="pre">bytearray()</span></code></a></p></td><td><a class="reference internal" href="#filter" title="filter"><code class="xref py py-func docutils literal notranslate"><span class="pre">filter()</span></code></a></p></td><td><a class="reference internal" href="#issubclass" title="issubclass"><code class="xref py py-func docutils literal notranslate"><span class="pre">issubclass()</span></code></a></p></td><td><a class="reference internal" href="#pow" title="pow"><code class="xref py py-func docutils literal notranslate"><span class="pre">pow()</span></code></a></p></td><td><a class="reference internal" href="#super" title="super"><code class="xref py py-func docutils literal notranslate"><span class="pre">super()</span></code></a></p></td></tr><tr class="row-even"><td><a class="reference internal" href="#func-bytes"><code class="docutils literal notranslate"><span class="pre">bytes()</span></code></a></p></td><td><a class="reference internal" href="#float" title="float"><code class="xref py py-func docutils literal notranslate"><span class="pre">float()</span></code></a></p></td><td><a class="reference internal" href="#iter" title="iter"><code class="xref py py-func docutils literal notranslate"><span class="pre">iter()</span></code></a></p></td><td><a class="reference internal" href="#print" title="print"><code class="xref py py-func docutils literal notranslate"><span class="pre">print()</span></code></a></p></td><td><a class="reference internal" href="#func-tuple"><code class="docutils literal notranslate"><span class="pre">tuple()</span></code></a></p></td></tr><tr class="row-odd"><td><a class="reference internal" href="#callable" title="callable"><code class="xref py py-func docutils literal notranslate"><span class="pre">callable()</span></code></a></p></td><td><a class="reference internal" href="#format" title="format"><code class="xref py py-func docutils literal notranslate"><span class="pre">format()</span></code></a></p></td><td><a class="reference internal" href="#len" title="len"><code class="xref py py-func docutils literal notranslate"><span class="pre">len()</span></code></a></p></td><td><a class="reference internal" href="#property" title="property"><code class="xref py py-func docutils literal notranslate"><span class="pre">property()</span></code></a></p></td><td><a class="reference internal" href="#type" title="type"><code class="xref py py-func docutils literal notranslate"><span class="pre">type()</span></code></a></p></td></tr><tr class="row-even"><td><a class="reference internal" href="#chr" title="chr"><code class="xref py py-func docutils literal notranslate"><span class="pre">chr()</span></code></a></p></td><td><a class="reference internal" href="#func-frozenset"><code class="docutils literal notranslate"><span class="pre">frozenset()</span></code></a></p></td><td><a class="reference internal" href="#func-list"><code class="docutils literal notranslate"><span class="pre">list()</span></code></a></p></td><td><a class="reference internal" href="#func-range"><code class="docutils literal notranslate"><span class="pre">range()</span></code></a></p></td><td><a class="reference internal" href="#vars" title="vars"><code class="xref py py-func docutils literal notranslate"><span class="pre">vars()</span></code></a></p></td></tr><tr class="row-odd"><td><a class="reference internal" href="#classmethod" title="classmethod"><code class="xref py py-func docutils literal notranslate"><span class="pre">classmethod()</span></code></a></p></td><td><a class="reference internal" href="#getattr" title="getattr"><code class="xref py py-func docutils literal notranslate"><span class="pre">getattr()</span></code></a></p></td><td><a class="reference internal" href="#locals" title="locals"><code class="xref py py-func docutils literal notranslate"><span class="pre">locals()</span></code></a></p></td><td><a class="reference internal" href="#repr" title="repr"><code class="xref py py-func docutils literal notranslate"><span class="pre">repr()</span></code></a></p></td><td><a class="reference internal" href="#zip" title="zip"><code class="xref py py-func docutils literal notranslate"><span class="pre">zip()</span></code></a></p></td></tr></tr><tr class="row-even"><td><a class="reference internal" href="#compile" title="compile"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile()</span></code></a></p></td><td><a class="reference internal" href="#globals" title="globals"><code class="xref py py-func docutils literal notranslate"><span class="pre">globals()</span></code></a></p></td><td><a class="reference internal" href="#map" title="map"><code class="xref py py-func docutils literal notranslate"><span class="pre">map()</span></code></a></p></td><td><a class="reference internal" href="#reversed" title="reversed"><code class="xref py py-func docutils literal notranslate"><span class="pre">reversed()</span></code></a></p></td><td><a class="reference internal" href="#__import__" title="__import__"><code class="xref py py-func docutils literal notranslate"><span class="pre">__import__()</span></code></a></p></td></tr><tr class="row-odd"><td><a class="reference internal" href="#complex" title="complex"><code class="xref py py-func docutils literal notranslate"><span class="pre">complex()</span></code></a></p></td><td><a class="reference internal" href="#hasattr" title="hasattr"><code class="xref py py-func docutils literal notranslate"><span class="pre">hasattr()</span></code></a></p></td><td><a class="reference internal" href="#max" title="max"><code class="xref py py-func docutils literal notranslate"><span class="pre">max()</span></code></a></p></td><td><a class="reference internal" href="#round" title="round"><code class="xref py py-func docutils literal notranslate"><span class="pre">round()</span></code></a></p></td><td></td></tr></tbody></table><p>各个内置函数的具体功能和用法，可以查看：<a href="https://docs.python.org/zh-cn/3/library/functions.html">https://docs.python.org/zh-cn/3/library/functions.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 基础篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 基本使用</title>
      <link href="/article/6c09ec5e.html"/>
      <url>/article/6c09ec5e.html</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍 Markdown 基本使用，主要包括文本格式，如标题设置、加粗文本、斜体、下划线、删除线、引用、列表等；接着介绍插入表格、超链接、图片等。</p><span id="more"></span><h2 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1 基本用法"></a>1 基本用法</h2><h3 id="1-1-文本格式"><a href="#1-1-文本格式" class="headerlink" title="1.1 文本格式"></a>1.1 文本格式</h3><p><strong>1. 设置分级标题</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p><strong>2. 加粗文本</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**我的博客**</span><br></pre></td></tr></table></figure><p><strong>印象笔记</strong></p><p><strong>3. 斜体</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*印象笔记*</span><br><span class="line">**天天向上**</span><br><span class="line">*努力学习*</span><br></pre></td></tr></table></figure><p><em>印象笔记</em><br><strong>天天向上</strong><br><em>努力学习</em></p><hr><p><strong>4. 下划线</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>how are you<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure><p><u>how are you</u></p><p><strong>5. 删除线</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~印象笔记不支持Markdown~~</span><br></pre></td></tr></table></figure><p><del>印象笔记不支持Markdown</del></p><p><strong>6. 添加分割线</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***</span><br></pre></td></tr></table></figure><p>哈哈</p><hr><p>那就这样吧</p><hr><p><strong>7. 引用文本</strong></p><p>文本前加<code>&gt;</code>就可以了，如下所示：</p><blockquote><p>鲁迅说：“横眉冷对千夫指，俯首甘为孺子牛”。</p></blockquote><p><strong>8. 添加符号列表和数字列表</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如何写代码</span><br><span class="line">1. 下载编辑器</span><br><span class="line">2. 找到代码框架</span><br><span class="line">3. 根据语法编写</span><br></pre></td></tr></table></figure><p>如何写代码</p><ol><li>下载编辑器</li><li>找到代码框架</li><li>根据语法编写</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 编辑器正确</span><br><span class="line">- 语法合法</span><br></pre></td></tr></table></figure><ul><li>编辑器正确</li><li>语法合法</li></ul><hr><p><strong>9. 添加待办事项</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第十周工作安排</span><br><span class="line">* [x] 周一上课</span><br><span class="line">* [ ] 周二写作业</span><br><span class="line">* [X] 周三锻炼</span><br></pre></td></tr></table></figure><p>第十周工作安排</p><ul><li><input checked="" disabled="" type="checkbox"> 周一上课</li><li><input disabled="" type="checkbox"> 周二写作业</li><li><input checked="" disabled="" type="checkbox"> 周三锻炼</li></ul><h3 id="1-2-内容插入"><a href="#1-2-内容插入" class="headerlink" title="1.2 内容插入"></a>1.2 内容插入</h3><p><strong>1. 插入链接</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度百科](https://baike.baidu.com/)</span><br></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/">百度百科</a></p><p><strong>2. 插入图片</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![img](https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/001.nmjr2hxcr5c.webp)</span><br></pre></td></tr></table></figure><p>效果如下图所示：</p><p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/001.nmjr2hxcr5c.webp" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/001.nmjr2hxcr5c.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><strong>3. 插入表格</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|账户类型|免费账户|标准账户|高级账户|</span><br><span class="line">|---|---|---|---|</span><br><span class="line">| 帐户流量 | 60M | 1GB | 10GB |</span><br><span class="line">| 设备数目 | 2台 | 无限制 | 无限制 |</span><br><span class="line">| 当前价格 | 免费 | ￥8.17/月 | ￥12.33/月|</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>账户类型</th><th>免费账户</th><th>标准账户</th><th>高级账户</th></tr></thead><tbody><tr><td>帐户流量</td><td>60M</td><td>1GB</td><td>10GB</td></tr><tr><td>设备数目</td><td>2台</td><td>无限制</td><td>无限制</td></tr><tr><td>当前价格</td><td>免费</td><td>￥8.17&#x2F;月</td><td>￥12.33&#x2F;月</td></tr></tbody></table><p><strong>4. 插入行内代码或代码块</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">#python</span><br><span class="line">import turtle</span><br><span class="line">turtle.pensize(50)</span><br><span class="line">turtle.down</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**5. 插入数学公式**</span><br><span class="line"></span><br><span class="line">印象笔记 Markdown 支持绝大多数的 LaTeX 数学公式，行间公式使用`$$f(x)=sin(x)$$`，行内公式使用`$\pmb&#123;A&#125;\in&#123;\mathcal&#123;R&#125;&#125;$`</span><br><span class="line">~~你太菜了~~</span><br><span class="line"></span><br><span class="line">```math</span><br><span class="line">e^&#123;i/pi&#125; +1 = 0</span><br></pre></td></tr></table></figure><p>详细了解，可以参考：<a href="https://www.zybuluo.com/codeep/note/163962#3">Cmd Markdown 公式指导手册</a></p><p><strong>6. 设置目录</strong></p><p>设置之后可以自动根据设置的分级标题来自动生成目录。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@[TOC]</span><br></pre></td></tr></table></figure><h2 id="2-多学几招"><a href="#2-多学几招" class="headerlink" title="2 多学几招"></a>2 多学几招</h2><p>Markdown也支持HTML格式，于是可以设置复杂的文本格式，比如页内跳转、图片大小，图片标题的设置等等</p><p><strong>1. 字体颜色设置</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#9900CC</span> &gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span> /etc/sudoers<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span>       </span><br></pre></td></tr></table></figure><p><font color=#9900CC ><strong> &#x2F;etc&#x2F;sudoers</strong></font>   </p><p><strong>2. 多个空格</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3. 换行</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4. 复杂的表格设计</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span> <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>可分享的(shareable)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>不可分享的(unshareable) <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>不可变的(static) <span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>/usr(软件放置处)<span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>/etc(配置文件)<span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>/opt(第三方软件)<span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>/boot(开机及内核文件)<span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>可变动的(variable) <span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>/var/mail(用户邮件信箱)<span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>/var/run(程序相关)<span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>/var/news(新闻组)<span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>/var/lock(文件锁相关)<span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><table>  <tr>    <th> </th>    <th colspan="3">可分享的(shareable)</th>    <th colspan="3">不可分享的(unshareable) </th>  </tr>  <tr>    <td rowspan="2"><center>不可变的(static) </center></td>    <td colspan="3"><center>/usr(软件放置处)</center></td>    <td colspan="3"><center>/etc(配置文件)</center></td>  </tr>  <tr>    <td colspan="3"><center>/opt(第三方软件)</center></td>    <td colspan="3"><center>/boot(开机及内核文件)</center></td>  </tr>  </tr>  <tr>    <td rowspan="2"><center>可变动的(variable) </center></td>    <td colspan="3"><center>/var/mail(用户邮件信箱)</center></td>    <td colspan="3">/var/run(程序相关)</center></td>  </tr>  <tr>    <td colspan="3"><center>/var/news(新闻组)</center></td>    <td colspan="3"><center>/var/lock(文件锁相关)</center></td>  </tr>  </table>  <p><strong>5. 合并单元格</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><p><strong>6. 给图片添加题注</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;border-radius: 0.3125em; box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);&quot;</span> <span class="attr">src</span>=<span class="string">&quot;这里输入图片地址&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;&quot;</span>&gt;</span>这里输入题注<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span> <span class="attr">class</span> = <span class="string">&quot;half&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> =<span class="string">&quot;https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/002.2lqrscnuavs0.webp#pic_left&quot;</span> <span class="attr">width</span> = <span class="string">&quot;32%&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/003.748m7etco700.webp#pic_left&quot;</span>  <span class="attr">width</span> = <span class="string">&quot;36%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改width的值就可以修改图片大小。</p><center class = "half"><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/002.2lqrscnuavs0.webp#pic_left" width = "32%"><img src = "https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/003.748m7etco700.webp#pic_right"  width = "36%"></center></p><p><strong>7. 页内跳转</strong></p><p>定义一个锚(id)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用markdown语法：[点击跳转](#jump)</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;jump&quot;</span>&gt;</span>跳转到的地方<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 PicX 创建免费的图床神器</title>
      <link href="/article/a559cbc7.html"/>
      <url>/article/a559cbc7.html</url>
      
        <content type="html"><![CDATA[<p>写博客文章时，图片的上传和存放是一个问题，我们也许会在不同的平台发布同一篇文章，这样一来每个平台都要上传图片。为了解决这些问题，做法是把图片统一上传到一个在线的第三方静态资源库中，我们把这个资源库称为图床。其返回一个图片的URL，使用 <code>markdown+图片url</code> 的方式写作文章，然后就可以直接使用链接引入图片。最后，整篇文章复制即可，再也不用担心图片的问题了。</p><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>PicX，基于 GitHub API 开发的图床管理神器，图片外链使用 jsDelivr 进行全球 CDN 加速。免费、稳定、高效。免下载、免安装，只需一个 <strong>GitHub 账号</strong>，打开网站即可进行配置使用，轻松解决图床难题。</p><p>一共3个步骤就完成设置了</p><ol><li>创建 GitHub 仓库</li><li>获取 GitHub Token</li><li>配置图床</li></ol><p>网站：<a href="https://link.juejin.cn?target=https%3A%2F%2Fpicx.xpoet.cn%2F" target="_blank" title="https://picx.xpoet.cn/" ref="nofollow noopener noreferrer">picx.xpoet.cn/</a></p><p>仓库：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FXPoet%2Fpicx" target="_blank" title="https://github.com/XPoet/picx" ref="nofollow noopener noreferrer">github.com/XPoet/picx</a></p><p>文档：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FXPoet%2Fpicx%2Fblob%2Fmaster%2FREADME.md" target="_blank" title="https://github.com/XPoet/picx/blob/master/README.md" ref="nofollow noopener noreferrer">github.com/XPoet/picx/…</a></p><p><strong>1. 创建 GitHub 仓库</strong></p><p>创建 一个用来存储图片的 GitHub 仓库，仓库属性必须选 Public 。</p><p>点击链接 <a href="https://github.com/">https://github.com/</a> 快速新建仓库</p><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/230526/123.5icizwyveeg0.webp#pic_center" width = 48%/><p><strong>2. 创建 GitHub Token</strong></p><p>PicX 的图床服务依赖于 <code>GitHub Token</code>，在开始使用之前，你必须先 创建 一个带有 repo 权限的 <code>GitHub Token</code>。</p><p>点击 <a href="https://github.com/settings/tokens/new">https://github.com/settings/tokens/new</a> 快速新建 GitHub Token</p><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/230526/124.25nlu5i5j1ds.webp#pic_center" width = 48%/><p>这里我们填完名称和勾选上repo选项之后呢，然后直接点击 Generate token 按钮，即可生成一个token，如下图：</p><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/230526/001.6lklllgnfxc0.webp#pic_center" width = 48%/><p>注意：这里英文的意思是：确保立即复制您的个人访问令牌。你将无法再看到它！那万一没了重新生成一个就行。</p><p><strong>3. 配置图床</strong></p><p><strong>1) 一键自动配置</strong></p><p>填写 GitHub Token，点击 “一键自动配置” 按钮会自动创建 GitHub 仓库，并完成仓库、分支和目录之间的绑定。</p><ul><li>一键自动配置 &gt; 创建的仓库：picx-images-hosting</li><li>一键自动配置 &gt; 创建的分支：master</li><li>一键自动配置 &gt; 创建的目录：yyyyMMdd (当天日期，例如：20230403)</li></ul><p>如果你刚开始使用 PicX，那么推荐使用一键自动配置，非常方便。当然你也可以随时切换成手动配置。</p><p><strong>2) 手动配置</strong></p><p>填入刚刚在Github生成的Token，点击确认Token。会自动获取该用户下的仓库</p><p>如果你绑定的仓库有多个分支，那么会出现选择分支的下拉列表，否则直接进入选择目录。</p><p>多个分支情况，选择其中一个即可。PicX 暂时不支持新建分支，需要你手动去创建。只有一个分支情况，无分支下拉列表。</p><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/230526/128.62w39qmdbb00.webp#pic_center" width = 48% /><ul><li>新建目录：需手动输入一个新目录。</li><li>根目录：图片将直接存储在仓库根目录下。</li><li>自动目录：自动生成日期格式 YYYYMMDD 的目录。例如：20230526</li><li>选择仓库目录：自动获取仓库下所有目录，选择一个即可。</li></ul><p>至此，完成图床配置，点击 “确认” 按钮即可跳转到图片上传界面。</p><blockquote><p>如果想对图片进行一个分类怎么办呢？<br>这个也很简单，新建一个文件夹然后再上传，等到下次还要上传到这个文件夹，我们在目录方式中勾选选择仓库目录，就会展示你创建的所有文件夹。然后进行选择。</p></blockquote><p><a href="https://qxienote.com/">https://qxienote.com/</a></p><p><strong>4. 上传图片</strong></p><p>在上传图片界面，你可以使用 拖拽文件、复制粘贴、选择文件 这三种方式选择你的图片到上传区域。</p><ul><li>你可以拖拽 一张 或 多张 图片到上传区域。</li><li>你可以先将一张图片复制（快捷键 Ctrl+C &#x2F; Command+C）到系统剪贴板，然后在 PicX 上传界面通过按下快捷键 Ctrl+V &#x2F; Command+V 将图片粘贴到上传区域。</li><li>你可以选择 一张 或 多张 图片到上传区域。</li></ul><p>选择图片完成后，在上传之前，可以自由修改图片名。</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/230526/131.1zt39d3iin5s.webp#pic_center" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/230526/131.1zt39d3iin5s.webp#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="131" width=48% /><p>勾选中哈希化，会在图片名称加上一串哈希值，确保图片名的唯一性，强烈建议开启。</p><p>图片上传成功之后，会自动复制图片链接到系统剪贴板，也可以点击 “复制链接” 按钮进行复制。</p><p><strong>5. 图床管理</strong></p><p>点击左侧菜单栏的图床管理，我们可以看到当前目录是我们选择的 2230526</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/230526/132.3r5biof03tg0.webp#pic_center" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/230526/132.3r5biof03tg0.webp#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="132" width=48% /><p>双击目录图标，可进入下一级目录，点击图片，可放大预览。</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/230526/133.94otifievhs.webp#pic_center" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/230526/133.94otifievhs.webp#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="133" width=48% /><p>支持的操作：</p><ul><li>在属性面板，可以查看到图片名称和图片大小。</li><li>在重命名输入框键入新名称后，按回车键确认。</li><li>删除单张图片&#x2F;批量删除多张图床</li><li>复制&#x2F;批量复制链接</li></ul><p><strong>6. 我的设置</strong></p><p>在我的设置界面，你可以体验到 PicX 图床丰富多彩的功能，根据自己需求调整最佳配置。</p><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/230526/130.6ywi4j6ahwc.webp#pic_center" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/230526/130.6ywi4j6ahwc.webp#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="130" width=48% /><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>使用 PicX 创建免费的图床神器：<a href="https://juejin.cn/post/6991273636493524999">https://juejin.cn/post/6991273636493524999</a></li><li>图床配置：<a href="https://picx-docs.xpoet.cn/usage-guide/config.html">https://picx-docs.xpoet.cn/usage-guide/config.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 常用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AIGC使用教程（一）-- ChatGPT 注册与基本使用</title>
      <link href="/article/ad3c5526.html"/>
      <url>/article/ad3c5526.html</url>
      
        <content type="html"><![CDATA[<p>本篇带你走进 AIGC 的基本使用，一步一步注册 ChatGPT，申请自己的 API 进行使用，解决代理的问题，最后介绍如何本地部署 ChatGPT，以及通过免费云平台搭建代理转发，从而不需要使用魔法就可以访问。</p><span id="more"></span><h2 id="1-ChatGPT-注册"><a href="#1-ChatGPT-注册" class="headerlink" title="1 ChatGPT 注册"></a>1 ChatGPT 注册</h2><p>受限于ChatGPT的服务器以及相关要求影响，其注册比较繁琐，在国内是无法使用的，而我们又想体验一下ChatGPT，具体ChatGPT怎么注册呢？我综合了网络上的各种注册教程，整理了这篇文章，供大家学习和使用。</p><h3 id="1-1-工具准备"><a href="#1-1-工具准备" class="headerlink" title="1.1 工具准备"></a>1.1 工具准备</h3><p>注册&#x2F;登录环境要求：</p><ul><li>注册和登陆需要 magic 环境。</li><li>需要有一个可以接收验证码的 magic 手机号，同样地区也是如上述网络环境之外的地区手机号（注意部分虚拟手机号的厂家无法接受验证码，请注意甄别）。</li></ul><p><strong>1. 注册工具准备</strong></p><p>在注册ChatGPT之前，需要准备好以下几个工具：</p><ol><li>一个邮箱（我们用的Gmail邮箱，经测试其他邮箱也可以）</li><li>magic 工具（自行百度，或者私信我）</li><li>一个 magic 手机号（后文将详细告诉你如何花少许人民币获取一个临时 magic 手机号）</li></ol><p>在以上三个工具中，可能大部分人前两个工具已经有了。但很多人没有 magic 手机号。下面我们一起来看一下如何快速，低费用获取一个能接收ChatGPT验证短信的 magic 手机号。</p><p><strong>2. 购买一个临时国外手机号</strong></p><p>首先，登录一个 magic 临时手机号购买网站：<a href="https://sms-activate.org/">https://sms-activate.org/</a></p><ol><li>进入 <a href="https://sms-activate.org/">SMS-Activate是在线接收短信的虚拟号码服务平台</a> 的首页，选择右上角【注册】按钮，在弹出的窗口中继续选择【注册】按钮：</li></ol><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/001.2qq2oz4gnhi0.webp#pic_center" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/001.2qq2oz4gnhi0.webp#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="012" width = 48%/><ol><li>输入邮箱、设置密码完成账号注册,（不建议用国内的邮箱，避免收不到问题，最好是Gmail之类的），密码长度在8位以上且必须包含拉丁字母和数字，至少一个大写字母。登录你的邮箱，然后你会收到一封标题为《确认电子邮件来注册SMS-Activate账户》这样的邮件，点击邮件中的【确认】按钮，注册成功后，在账号中，点击右上角的充值。提示：如果收件箱找不到，看一下垃圾箱或者黑名单&#x2F;规则之类是不是过滤掉了。如果实在没有，建议换一个邮箱试试。</li></ol><img src="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/002.2yj3a24fot40.webp#pic_center" class="lazyload placeholder" data-srcset="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/002.2yj3a24fot40.webp#pic_center" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="013" width = 48%/><ol><li>确认帐号注册成功后，登录平台，不过帐号还需要充值才能使用，可以使用支付宝充值。还是右上角，选择【余额】，然后选择【充值】按钮，接着选择支付宝进行充值，这里现在要求至少充值2美元，输入2，点击最下角的支付，然后进入支付宝扫码付款页面，扫码支付即可，自动汇率换算支付人民币14.93元（你注册时可能由于汇率不同金额会有差异）。</li></ol><p><center class = "half"><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/003.2v8qjmcqw4e0.webp#pic_left" width = "30%"><img src = "https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/004.3pzrnjbmbcy0.webp#pic_left"  width = "36%"></center></p><ol><li>充值完成后，注意看个人页面右上角的余额有没有变化。然后看左侧，找到“openAI”这个，点击展开（如果没有，在选择服务-服务搜索里直接搜索一下）：</li></ol><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/005.4zg8mxa5h9o0.webp#pic_center" width = 24%><ol><li>接着，选择手机号码的归属地，哪个便宜买哪个。选好后直接点击对应国家后面的购物车图片即可：</li></ol><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/006.6zlth6754ls0.webp#pic_center" width = 24%><ol><li>购买后，账号页面右侧，可以看到你购买的手机号，然后返回到ChatGPT的页面，填入对应的手机号码，页面会自动显示出收到的短信。</li></ol><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/007.48y0wpvvj4g0.webp#pic_center" width = 36%><p>关于这个国外手机号说四点：</p><ul><li>这里显示的号码是包含国家代码的。比如*国手机号+254771961634，你在网站上填写手机号时，需要去掉前面的 254 这个国别代码。另外在接收验证码时，建议使用低价的印尼等手机号，印度经常挤爆收不到；如果长时间没有收到验证码，可更换成其他区域尝试。</li><li>这是一个临时手机号，有效时长20分钟</li><li>20分钟内如果没有收到验证码，可以点右侧的叉号，退订，费用还会返还。（注：一般在ChatGPT注册页面发出验证码后一分钟左右便可以收到验证码。收不到验证短信可以在20分钟到期前退订，三分钟以上收不到验证码建议就不用再等了）</li><li>如遇到无法登录的情况，请打开谷歌浏览器的无痕窗口进行登录，一般会很快登录账号。</li></ul><p>另外保留这个显示 magic 手机号的页面处于打开状态即可，便于快速回来查收验证短信。重点是：在手机验证页面，一定要注意选择正确的国家（注意国旗）！一定要注意选择正确的国家！一定要注意选择正确的国家！</p><h3 id="1-2-注册流程"><a href="#1-2-注册流程" class="headerlink" title="1.2 注册流程"></a>1.2 注册流程</h3><p><strong>1. 进入注册</strong><br>打开ChatGPT的官方网站，链接为 <a href="https://openai.com/">https://openai.com/</a>，然后点击【Sign Up】进入下一步。</p><p>如果页面无法正常显示，需要更换其他的网络节点，或者清理下浏览器cookie再次尝试。</p><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/008.4m2curnqu1a0.webp#pic_center" width = 36%><p><strong>2. 邮箱注册</strong></p><p>注册方式为邮箱注册，可以用微软帐号或者谷歌帐号登录，微软账号或者谷歌账号好像不需要验证，国内或者其他邮箱地址都需要进行验证（比如QQ邮箱是需要验证的）。</p><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/009.1a9537ruo4rk.webp#pic_center" width = 24%><p><strong>3. 填写姓名信息</strong></p><p>邮箱通过后，会提示你输入姓名，按照要求进行输入即可。如果显示该IP地址注册数量过多，则需要更换节点（更换节点时，无需对浏览器进行重启，刷新页面即可）。</p><p><strong>4. 验证手机号（重点！！！）</strong><br>随后将会进入手机验证的环节，记住：这里不能选择国内的手机号，国内的手机号无法进行注册。</p><p>如果是只想体验一下产品的朋友，可直接在某海鲜市场购买服务，实时帮你接收验证码，非常快速。动手能力强一些的朋友，可以通过虚拟接码平台进行接收验证码。</p><p>选择手机号国别，并输入第二步中购买的手机号码，点击发送验证短信（send code）：（例如，我们买的是手机号，则选择Kenya，后面输入手机号时注意国家区号不要重复输入）</p><p>然后返回到第二步中购买手机号的页面，查收短信：(一般一分钟左右可以收到短信)</p><h3 id="1-3-申请-API"><a href="#1-3-申请-API" class="headerlink" title="1.3 申请 API"></a>1.3 申请 API</h3><p>OpenAI账号注册完成后，登录界面如下所示。点击右上角View API keys—&gt; Create new secret key，可以生成属于你自己的API，有了这个API，就可以用于开发基于ChatGPT API的应用程序。</p><p><center class = "half"><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/010.3ruq1w73inu0.webp#pic_left" width = "24%"><img src = "https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/024.56cyk54rvtc0.webp#pic_left"  width = "48%"></center></p><p>需要注意的是，出于安全原因，这个API只展示一次，请务必在关闭对话框之前，将其复制到你其他的地方保管。</p><p>另外，点击左侧栏的Usage ,可以方便清晰看到token的使用量情况，数据5分钟更新一次。OpenAI官方针对每一个新注册的账户，提供$5免费token使用额度。这样一想，前面花费不到$5免费token使用额度。不过需要注意的是，免费额度有时间限制，过期了额度就作废。</p><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/011.wvukprqvcq8.webp#pic_center" width = 48%><hr><h2 id="2-API-使用"><a href="#2-API-使用" class="headerlink" title="2 API 使用"></a>2 API 使用</h2><h3 id="2-1-简单测试"><a href="#2-1-简单测试" class="headerlink" title="2.1 简单测试"></a>2.1 简单测试</h3><p>使用 Python 简单测试，你只需 <code>import openai</code> 包，带上刚申请的API，模型选择——<code>text-davinci-003</code> 就可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"> </span><br><span class="line">openai.api_key = <span class="string">&#x27;sk-xxxxxx&#x27;</span>        <span class="comment"># 填写个人API</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chat_gpt</span>(<span class="params">prompt</span>):</span><br><span class="line">     prompt = prompt</span><br><span class="line">     model_engine = <span class="string">&quot;text-davinci-003&quot;</span></span><br><span class="line">     completion = openai.Completion.create(</span><br><span class="line">         engine=model_engine,</span><br><span class="line">         prompt=prompt,</span><br><span class="line">         max_tokens=<span class="number">1024</span>,</span><br><span class="line">         n=<span class="number">1</span>,</span><br><span class="line">         stop=<span class="literal">None</span>,</span><br><span class="line">         temperature=<span class="number">0.5</span>,</span><br><span class="line">         timeout=<span class="number">1000</span>,</span><br><span class="line">     )</span><br><span class="line"> </span><br><span class="line">     response = completion.choices[<span class="number">0</span>].text</span><br><span class="line">     <span class="built_in">print</span>(response)</span><br><span class="line"> </span><br><span class="line">chat_gpt(<span class="string">&quot;现在几点了&quot;</span>)          <span class="comment"># 现在是北京时间下午4点30分。</span></span><br></pre></td></tr></table></figure><blockquote><p>更多的例子，请自行参考<a href="https://link.juejin.cn?target=https%3A%2F%2Fopenai.com%2Fblog%2Fintroducing-chatgpt-and-whisper-apis" target="_blank" title="https://openai.com/blog/introducing-chatgpt-and-whisper-apis" ref="nofollow noopener noreferrer">官方例子</a>以及<a href="https://link.juejin.cn?target=https%3A%2F%2Fplatform.openai.com%2Fdocs%2Fapi-reference%2Fintroduction" target="_blank" title="https://platform.openai.com/docs/api-reference/introduction" ref="nofollow noopener noreferrer">官方API文档</a>。</p></blockquote><h3 id="2-2-设置代理"><a href="#2-2-设置代理" class="headerlink" title="2.2 设置代理"></a>2.2 设置代理</h3><p>有的同学可能会遇到以下问题，这里综合了网上的解决办法。</p><blockquote><p>返回错误信息：<br>raise error.APIConnectionError(openai.error.APIConnectionError: Error communicating with OpenAI: HTTPSConnectionPool(host&#x3D;’api.openai.com’, port&#x3D;443): Max retries exceeded with url: &#x2F;v1&#x2F;chat&#x2F;completions (Caused by SSLError(SSLEOFError(8, ‘EOF occurred in violation of protocol (_ssl.c:1131)’)))</p></blockquote><p><strong>1. urllib3 降低版本到 1.25.11</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install urllib3==<span class="number">1.25</span><span class="number">.11</span></span><br></pre></td></tr></table></figure><blockquote><p>参考大佬文章：<a href="https://zhuanlan.zhihu.com/p/350015032">Python 遭遇 ProxyError 问题记录</a></p></blockquote><p>简单来说就是 1.26.0 版本的 urllib3 添加了 HTTPS 支持，但代理服务器不支持 HTTPS，所以报错（pip走代理报错也差不多类似原因，具体请参考上文，有详细解读）</p><p><strong>2. 修改openai源码（亲测成功）</strong></p><p>根据自己安装openai包的路径，找到并打开 <code>api_requestor.py</code>，我的路径为：<code>C:\***\***\.conda\envs\py3.8\lib\site-packages\openai\api_requestor.py</code>，找到下面的部分：<code>if not hasattr(_thread_context, &quot;session&quot;):</code>，并在此方法上方加入代理，如下图框的部分。</p><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/012.r0cjtzw1ank.webp#pic_center" width = 48%><p><strong>代理部分：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># proxy = &#123;</span></span><br><span class="line"><span class="comment">#    &#x27;http&#x27;: &#x27;http://&lt;代理ip&gt;:&lt;代理端口&gt;&#x27;,</span></span><br><span class="line"><span class="comment">#    &#x27;https&#x27;: &#x27;https://&lt;代理ip&gt;:&lt;代理端口&gt;&#x27;</span></span><br><span class="line"><span class="comment">#       &#125;</span></span><br><span class="line"> </span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://localhost:7890&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;http://localhost:7890&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>端口号是你用对应软件的代理端口，我这里是7890。</p><p>在 <code>“result = _thread_context.session.request(”</code> 中加入代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">result = _thread_context.session.request(</span><br><span class="line">    method,</span><br><span class="line">    abs_url,</span><br><span class="line">    headers=headers,</span><br><span class="line">    data=data,</span><br><span class="line">    files=files,</span><br><span class="line">    stream=stream,</span><br><span class="line">    timeout=request_timeout <span class="keyword">if</span> request_timeout <span class="keyword">else</span> TIMEOUT_SECS,</span><br><span class="line">    <span class="comment"># proxies=_thread_context.session.proxies,      # 注释掉原本的代理</span></span><br><span class="line">    proxies=proxy                                   <span class="comment"># 添加自己的</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>参考大佬文章：<a href="https://www.cnblogs.com/ghj1976/p/diao-yongopenai-deapi-chu-xianrequest-timed-out-ch.html">调用OpenAI的API出现Request timed out处理</a></p></blockquote><p><strong>3、代码里设置环境变量（亲测成功）</strong></p><p>添加以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line">os.environ[<span class="string">&quot;http_proxy&quot;</span>] = <span class="string">&quot;http://localhost:7890&quot;</span></span><br><span class="line">os.environ[<span class="string">&quot;https_proxy&quot;</span>] = <span class="string">&quot;http://localhost:7890&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-ChatGPT-本地部署"><a href="#3-ChatGPT-本地部署" class="headerlink" title="3 ChatGPT 本地部署"></a>3 ChatGPT 本地部署</h2><h3 id="3-1-使用魔法"><a href="#3-1-使用魔法" class="headerlink" title="3.1 使用魔法"></a>3.1 使用魔法</h3><p><strong>第一步，将 ChatGPT 的源代码从 Github 上下载到本地</strong></p><p>以下是命令示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xtekky/chatgpt-clone.git</span><br></pre></td></tr></table></figure><p>这样就可以克隆代码到您的电脑上。</p><p><strong>第二步是安装环境</strong></p><p>这里选用熟悉的 Conda 安装，首先进入项目目录，然后运行以下命令来创建虚拟环境。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n chatgpt-py3<span class="number">.9</span> python=<span class="number">3.9</span>        <span class="comment"># 创建虚拟环境</span></span><br><span class="line">conda activate chatgpt-py3<span class="number">.9</span>                    <span class="comment"># 激活环境</span></span><br><span class="line">cd ../chatgpt-clone                             <span class="comment"># 进入项目</span></span><br></pre></td></tr></table></figure><p>没有 Anconda 的，可以使用 Python 的 <code>venv</code> 包，首先进入项目目录，然后运行以下命令来创建虚拟环境（Linux）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd chatgpt-clone</span><br><span class="line">python -m venv venv</span><br><span class="line">source venv/<span class="built_in">bin</span>/activate            <span class="comment"># macOS/Linux</span></span><br></pre></td></tr></table></figure><p>如果您在使用 Windows 系统，需要使用以下的命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">venv\Scripts\activate.bat</span><br></pre></td></tr></table></figure><p><strong>第三步：安装所需要的依赖</strong></p><p>使用以下命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p><strong>第四步：修改配置文件</strong></p><p>找到项目目录下的 config.josn 文件，并将文件中的 openai_key 替换成您自己的 key。</p><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/013.7hmsme73cv80.webp#pic_center" width = 64%><p><strong>第五步：配置 magic 端口</strong></p><p>因为 ChatGPT 在本质上是调用 OpenAI 的接口，因此在运行该项目之前，需要让命令行工具具有 magic 能力（用魔法，前面讲过了）。</p><p>可以在命令行工具里输入以下命令（注意：您需要修改这个端口号！）</p><p><strong>Linux</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export https_proxy=http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">7890</span> http_proxy=http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">7890</span> all_proxy=socks5://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">7890</span></span><br></pre></td></tr></table></figure><p><strong>Windows</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">7890</span></span><br><span class="line"><span class="built_in">set</span> https_proxy=http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">7890</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> http_proxy_user=user</span><br><span class="line"><span class="built_in">set</span> http_proxy_pass=<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> https_proxy_user=user</span><br><span class="line"><span class="built_in">set</span> https_proxy_pass=<span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>温馨提示：一定要加 http:&#x2F;&#x2F;，直接写域名或者 IP 不行。http 和 https 都要设置。然后如果想验证是否成功配置了代理的话，用 ping 命令是不可以的；ping的协议不是https，也不是https，是ICMP协议。可以使用 <code>curl -vv http://www.google.com</code>这条命令来验证。</p></blockquote><p>cmd，Git Bash，PowerShell 设置的方式不同</p><ul><li>cmd 中用 set http_proxy 设置</li><li>Git Bash 中用 export http_proxy 设置</li><li>PowerShell 中按照这样设置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#<span class="doctag">NOTE:</span> registry keys for IE 8, may vary for other versions</span></span><br><span class="line">$regPath = <span class="string">&#x27;HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings&#x27;</span></span><br><span class="line"></span><br><span class="line">function Clear-Proxy</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Set</span>-ItemProperty -Path $regPath -Name ProxyEnable -Value <span class="number">0</span></span><br><span class="line">    <span class="type">Set</span>-ItemProperty -Path $regPath -Name ProxyServer -Value <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="type">Set</span>-ItemProperty -Path $regPath -Name ProxyOverride -Value <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    [Environment]::SetEnvironmentVariable(<span class="string">&#x27;http_proxy&#x27;</span>, $null, <span class="string">&#x27;User&#x27;</span>)</span><br><span class="line">    [Environment]::SetEnvironmentVariable(<span class="string">&#x27;https_proxy&#x27;</span>, $null, <span class="string">&#x27;User&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="type">Set</span>-Proxy</span><br><span class="line">&#123;</span><br><span class="line">    $proxy = <span class="string">&#x27;http://example.com&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Set</span>-ItemProperty -Path $regPath -Name ProxyEnable -Value <span class="number">1</span></span><br><span class="line">    <span class="type">Set</span>-ItemProperty -Path $regPath -Name ProxyServer -Value $proxy</span><br><span class="line">    <span class="type">Set</span>-ItemProperty -Path $regPath -Name ProxyOverride -Value <span class="string">&#x27;&lt;local&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    [Environment]::SetEnvironmentVariable(<span class="string">&#x27;http_proxy&#x27;</span>, $proxy, <span class="string">&#x27;User&#x27;</span>)</span><br><span class="line">    [Environment]::SetEnvironmentVariable(<span class="string">&#x27;https_proxy&#x27;</span>, $proxy, <span class="string">&#x27;User&#x27;</span>)</span><br></pre></td></tr></table></figure><p>也可以在代码里设置环境变量</p><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/014.qkw15yc8g8g.webp#pic_center" width = 48%><p><strong>第六步就是运行 ChatGPT 项目并进行访问了</strong></p><p>你只需要在命令行输入 python run.py，然后在浏览器中访问相应的链接就好了。</p><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/015.d6bfqrwxovk.webp#pic_center" width = 48%><p>首先，您可以像使用普通的 GPT 一样使用暗黑版。但是，为什么他被称之为 “暗黑版” 呢？因为当您使用了暗黑模式之后，ChatGPT 将突破底线，以一种更加深入和黑暗的方式回答您的问题。以下是如何使用暗黑版的提示：</p><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/016.ic4al3nz228.webp#pic_center" width = 48%><h3 id="3-2-通过免费云平台搭建代理转发"><a href="#3-2-通过免费云平台搭建代理转发" class="headerlink" title="3.2 通过免费云平台搭建代理转发"></a>3.2 通过免费云平台搭建代理转发</h3><p>第一步，我们需要登录云平台并进入应用选择菜单。下面是云平台官网链接：<a href="https://cloud.sealos.io/">https://cloud.sealos.io/</a></p><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/017.arkjwnce80c.webp#pic_center" width = 36%><p>第二步，首次进入的用户需要新建一个应用，并进行应用的基本配置。</p><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/018.1fs4xplnxlxc.webp#pic_center" width = 48%><p>第三步，通过高级配置来实现代理转发。</p><p>您现在可以进入高级设置选项卡来配置代理转发功能。</p><ul><li>点开高级配置</li><li>点击新增 configmap</li><li>文件名写: <code>/etc/nginx/nginx.conf</code></li><li>文件值为刚刚复制的那段代码</li><li>点击确认</li></ul><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/019.3w5pf0dgrew0.webp#pic_center" width = 36%><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/020.15fxydbv0f9c.webp#pic_center" width = 48%><p><strong>nginx 配置代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">worker_rlimit_nofile <span class="number">51200</span>;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    resolver <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>;</span><br><span class="line">    proxy_ssl_server_name on;</span><br><span class="line"></span><br><span class="line">    access_log off;</span><br><span class="line">    server_names_hash_bucket_size <span class="number">512</span>;</span><br><span class="line">    client_header_buffer_size 64k;</span><br><span class="line">    large_client_header_buffers <span class="number">4</span> 64k;</span><br><span class="line">    client_max_body_size 50M;</span><br><span class="line"></span><br><span class="line">    proxy_connect_timeout       240s;</span><br><span class="line">    proxy_read_timeout          240s;</span><br><span class="line">    proxy_buffer_size 128k;</span><br><span class="line">    proxy_buffers <span class="number">4</span> 256k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        server_name xxxxx.cloud.sealos.io; <span class="comment"># 这个地方替换成 sealos 提供的内容</span></span><br><span class="line"></span><br><span class="line">        location ~ /openai/(.*) &#123;</span><br><span class="line">            <span class="comment"># auth check</span></span><br><span class="line">          </span><br><span class="line"></span><br><span class="line">            proxy_pass https://api.openai.com/$<span class="number">1</span>$is_args$args;</span><br><span class="line">            proxy_set_header Host api.openai.com;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            <span class="comment"># 如果响应是流式的</span></span><br><span class="line">            proxy_set_header Connection <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">            chunked_transfer_encoding off;</span><br><span class="line">            proxy_buffering off;</span><br><span class="line">            proxy_cache off;</span><br><span class="line">            <span class="comment"># 如果响应是一般的</span></span><br><span class="line">            proxy_buffer_size 128k;</span><br><span class="line">            proxy_buffers <span class="number">4</span> 256k;</span><br><span class="line">            proxy_busy_buffers_size 256k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四步，点击部署应用按钮。</p><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/021.16j17a5gndj4.webp#pic_center" width = 48%><p>第五步，如果成功，你将看到下面的结果。最后，你可以点击详情获得外部访问链接。</p><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/022.36lusgudolk0.webp#pic_center" width = 48%><p>第六步，如果你正在使用暗黑版的 OpenAI GPT，并且想要更轻松地使用以上方法，那么你可以修改 <code>config.json</code> 文件中的两个参数，具体操作请看下面：</p><ul><li>将 <code>proxy.enable</code> 设置为 false；</li><li>将 <code>openai_api_base</code> 改为在上一步获取的对外链接后加 <code>/openai</code>。</li></ul><img src ="https://cdn.staticaly.com/gh/molimi/image-hosting@main/ChatGPT/023.3gy8v0zm7xo0.webp#pic_center" width = 64%><p>最后，你可以通过命令运行暗黑版 GPT，就可以实现无魔法访问。好了，以上就是通过免费云平台搭建代理转发，实现对 OpenAI GPT 的免费访问的全部步骤。</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>ChatGPT注册教程攻略：<a href="https://www.xnbeast.com/create-openai-chatgpt-account/">https://www.xnbeast.com/create-openai-chatgpt-account/</a></li><li>2023年最新国内ChatGPT注册教程：<a href="https://juejin.cn/post/7220696541309108285">https://juejin.cn/post/7220696541309108285</a></li><li>Python 遭遇 ProxyError 问题记录：<a href="https://zhuanlan.zhihu.com/p/350015032">https://zhuanlan.zhihu.com/p/350015032</a></li><li>ChatGPT Plus官方推荐新手教程：<a href="https://chatgpt-plus.github.io/chatgpt-plus/">https://chatgpt-plus.github.io/chatgpt-plus/</a></li><li>ChatGPT本地部署：<a href="https://juejin.cn/post/7236668895867764773">https://juejin.cn/post/7236668895867764773</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> AIGC </category>
          
          <category> ChatGPT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
            <tag> OPENAI </tag>
            
            <tag> AIGC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
